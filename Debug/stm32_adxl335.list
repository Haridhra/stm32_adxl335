
stm32_adxl335.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005324  08005324  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800532c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000080  080053ac  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080053ac  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017014  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef8  00000000  00000000  000370be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00039fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e186  00000000  00000000  0003c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012569  00000000  00000000  0005a5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9a54  00000000  00000000  0006cb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126573  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  001265c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800515c 	.word	0x0800515c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800515c 	.word	0x0800515c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96c 	b.w	8000520 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8082 	bne.w	8000376 <__udivmoddi4+0x116>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d946      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa05 f302 	lsl.w	r3, r5, r2
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	4097      	lsls	r7, r2
 800028c:	ea41 0e03 	orr.w	lr, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbe fcf8 	udiv	ip, lr, r8
 800029c:	b2b9      	uxth	r1, r7
 800029e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80002a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002a6:	fb0c f001 	mul.w	r0, ip, r1
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002b4:	f080 8116 	bcs.w	80004e4 <__udivmoddi4+0x284>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f240 8113 	bls.w	80004e4 <__udivmoddi4+0x284>
 80002be:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a1b      	subs	r3, r3, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f101 	mul.w	r1, r0, r1
 80002d8:	42a1      	cmp	r1, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8101 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	f240 80fe 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	1a64      	subs	r4, r4, r1
 80002f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d14f      	bne.n	80003b2 <__udivmoddi4+0x152>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80e7 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 8000342:	4684      	mov	ip, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d7 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7c0      	b.n	80002f8 <__udivmoddi4+0x98>
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80af 	beq.w	80004de <__udivmoddi4+0x27e>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14b      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0x13e>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80b7 	bhi.w	800050c <__udivmoddi4+0x2ac>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0303 	sbc.w	r3, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469e      	mov	lr, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0aa      	beq.n	8000302 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b0:	e7a7      	b.n	8000302 <__udivmoddi4+0xa2>
 80003b2:	f1c2 0c20 	rsb	ip, r2, #32
 80003b6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ba:	4097      	lsls	r7, r2
 80003bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003c8:	4318      	orrs	r0, r3
 80003ca:	fbbc f1fe 	udiv	r1, ip, lr
 80003ce:	0c05      	lsrs	r5, r0, #16
 80003d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003dc:	fb01 f308 	mul.w	r3, r1, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	197d      	adds	r5, r7, r5
 80003ea:	f101 3cff 	add.w	ip, r1, #4294967295
 80003ee:	f080 808b 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8088 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	b285      	uxth	r5, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d271      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d96f      	bls.n	8000500 <__udivmoddi4+0x2a0>
 8000420:	3802      	subs	r0, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c1 0c20 	rsb	ip, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f70c 	lsr.w	r7, r2, ip
 8000436:	431f      	orrs	r7, r3
 8000438:	fa20 f40c 	lsr.w	r4, r0, ip
 800043c:	fa05 f301 	lsl.w	r3, r5, r1
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa25 f50c 	lsr.w	r5, r5, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 5519 	mls	r5, lr, r9, r5
 8000458:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800045c:	fb09 fa08 	mul.w	sl, r9, r8
 8000460:	45aa      	cmp	sl, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f301 	lsl.w	r3, r0, r1
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x21e>
 800046c:	197d      	adds	r5, r7, r5
 800046e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000472:	d247      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 8000474:	45aa      	cmp	sl, r5
 8000476:	d945      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000478:	f1a9 0902 	sub.w	r9, r9, #2
 800047c:	443d      	add	r5, r7
 800047e:	eba5 050a 	sub.w	r5, r5, sl
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0fe 	udiv	r0, r5, lr
 8000488:	fb0e 5510 	mls	r5, lr, r0, r5
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb00 f808 	mul.w	r8, r0, r8
 8000494:	45a0      	cmp	r8, r4
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f100 35ff 	add.w	r5, r0, #4294967295
 800049e:	d22d      	bcs.n	80004fc <__udivmoddi4+0x29c>
 80004a0:	45a0      	cmp	r8, r4
 80004a2:	d92b      	bls.n	80004fc <__udivmoddi4+0x29c>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	fba0 8902 	umull	r8, r9, r0, r2
 80004b4:	454c      	cmp	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	464d      	mov	r5, r9
 80004ba:	d319      	bcc.n	80004f0 <__udivmoddi4+0x290>
 80004bc:	d016      	beq.n	80004ec <__udivmoddi4+0x28c>
 80004be:	b15e      	cbz	r6, 80004d8 <__udivmoddi4+0x278>
 80004c0:	ebb3 020e 	subs.w	r2, r3, lr
 80004c4:	eb64 0405 	sbc.w	r4, r4, r5
 80004c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	ea4c 0202 	orr.w	r2, ip, r2
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c6 2400 	strd	r2, r4, [r6]
 80004d8:	2100      	movs	r1, #0
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e70e      	b.n	8000302 <__udivmoddi4+0xa2>
 80004e4:	46ac      	mov	ip, r5
 80004e6:	e6ed      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e701      	b.n	80002f0 <__udivmoddi4+0x90>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e6      	bcs.n	80004be <__udivmoddi4+0x25e>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0507 	sbc.w	r5, r9, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7e0      	b.n	80004be <__udivmoddi4+0x25e>
 80004fc:	4628      	mov	r0, r5
 80004fe:	e7d3      	b.n	80004a8 <__udivmoddi4+0x248>
 8000500:	4660      	mov	r0, ip
 8000502:	e78f      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7ba      	b.n	800047e <__udivmoddi4+0x21e>
 8000508:	4661      	mov	r1, ip
 800050a:	e777      	b.n	80003fc <__udivmoddi4+0x19c>
 800050c:	4608      	mov	r0, r1
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0x148>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443d      	add	r5, r7
 8000516:	e715      	b.n	8000344 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e726      	b.n	800036c <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <map>:

/**
 *	Map - mapValue, minInp, maxInp, minOut, maxOut
 */
static int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	603b      	str	r3, [r7, #0]
	return ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	69b9      	ldr	r1, [r7, #24]
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	1a8a      	subs	r2, r1, r2
 800053e:	fb02 f203 	mul.w	r2, r2, r3
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	fb92 f2f3 	sdiv	r2, r2, r3
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	4413      	add	r3, r2
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
	...

0800055c <check_accel_dir>:

/**
 *	ADC Analog Watchdog Callback - Called when window condition is met
 */
void check_accel_dir(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
//#ifndef NDEBUG
	//debug_console_log("Acceleration Detected!\r\n");
//#endif
	if (millis() - lastAccTime >= accInterval) {
 8000562:	f000 fa0a 	bl	800097a <millis>
 8000566:	4602      	mov	r2, r0
 8000568:	4b4d      	ldr	r3, [pc, #308]	; (80006a0 <check_accel_dir+0x144>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	4a4d      	ldr	r2, [pc, #308]	; (80006a4 <check_accel_dir+0x148>)
 8000570:	8812      	ldrh	r2, [r2, #0]
 8000572:	4293      	cmp	r3, r2
 8000574:	f0c0 8090 	bcc.w	8000698 <check_accel_dir+0x13c>
		yRaw = adc_get_result();
 8000578:	f000 fb22 	bl	8000bc0 <adc_get_result>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b49      	ldr	r3, [pc, #292]	; (80006a8 <check_accel_dir+0x14c>)
 8000582:	801a      	strh	r2, [r3, #0]
		int32_t yScaled = map(yRaw, yRawMin, yRawMax, -1000, 1000);
 8000584:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <check_accel_dir+0x14c>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	4b48      	ldr	r3, [pc, #288]	; (80006ac <check_accel_dir+0x150>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <check_accel_dir+0x154>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4b45      	ldr	r3, [pc, #276]	; (80006b4 <check_accel_dir+0x158>)
 800059e:	f7ff ffc1 	bl	8000524 <map>
 80005a2:	6078      	str	r0, [r7, #4]
		if (yScaled > fw_trig) {
 80005a4:	4b44      	ldr	r3, [pc, #272]	; (80006b8 <check_accel_dir+0x15c>)
 80005a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005aa:	461a      	mov	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4293      	cmp	r3, r2
 80005b0:	dd10      	ble.n	80005d4 <check_accel_dir+0x78>
//#ifndef NDEBUG
			sprintf((char*) debug_buf, "Forward acceleration! = %ld\r\n",
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4941      	ldr	r1, [pc, #260]	; (80006bc <check_accel_dir+0x160>)
 80005b6:	4842      	ldr	r0, [pc, #264]	; (80006c0 <check_accel_dir+0x164>)
 80005b8:	f004 f99c 	bl	80048f4 <siprintf>
					yScaled);
			debug_console_log((char*) debug_buf);
 80005bc:	4840      	ldr	r0, [pc, #256]	; (80006c0 <check_accel_dir+0x164>)
 80005be:	f000 fa1b 	bl	80009f8 <debug_console_log>
//#endif
			currAccDir = Forward;
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <check_accel_dir+0x168>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
			lastAccTime = millis();
 80005c8:	f000 f9d7 	bl	800097a <millis>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <check_accel_dir+0x144>)
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e016      	b.n	8000602 <check_accel_dir+0xa6>
		} else if (yScaled < bw_trig) {
 80005d4:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <check_accel_dir+0x16c>)
 80005d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4293      	cmp	r3, r2
 80005e0:	da0f      	bge.n	8000602 <check_accel_dir+0xa6>
//#ifndef NDEBUG
			sprintf((char*) debug_buf, "Backward acceleration! = %ld\r\n",
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4939      	ldr	r1, [pc, #228]	; (80006cc <check_accel_dir+0x170>)
 80005e6:	4836      	ldr	r0, [pc, #216]	; (80006c0 <check_accel_dir+0x164>)
 80005e8:	f004 f984 	bl	80048f4 <siprintf>
					yScaled);
			debug_console_log((char*) debug_buf);
 80005ec:	4834      	ldr	r0, [pc, #208]	; (80006c0 <check_accel_dir+0x164>)
 80005ee:	f000 fa03 	bl	80009f8 <debug_console_log>
//#endif
			currAccDir = Backward;
 80005f2:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <check_accel_dir+0x168>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
			lastAccTime = millis();
 80005f8:	f000 f9bf 	bl	800097a <millis>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <check_accel_dir+0x144>)
 8000600:	6013      	str	r3, [r2, #0]
		}

		if ((mold == MoldOpen) && (currAccDir == Forward)) {
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <check_accel_dir+0x174>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10d      	bne.n	8000626 <check_accel_dir+0xca>
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <check_accel_dir+0x168>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d109      	bne.n	8000626 <check_accel_dir+0xca>
//#ifndef NDEBUG
			debug_console_log("Mold Closing\r\n");
 8000612:	4830      	ldr	r0, [pc, #192]	; (80006d4 <check_accel_dir+0x178>)
 8000614:	f000 f9f0 	bl	80009f8 <debug_console_log>
//#endif
			mold = MoldClosing;
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <check_accel_dir+0x174>)
 800061a:	2203      	movs	r2, #3
 800061c:	701a      	strb	r2, [r3, #0]
			currAccDir = None;
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <check_accel_dir+0x168>)
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e034      	b.n	8000690 <check_accel_dir+0x134>
		} else if ((mold == MoldClosing) && (currAccDir == Backward)) {
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <check_accel_dir+0x174>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d10d      	bne.n	800064a <check_accel_dir+0xee>
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <check_accel_dir+0x168>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d109      	bne.n	800064a <check_accel_dir+0xee>
			mold = MoldClosed;
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <check_accel_dir+0x174>)
 8000638:	2202      	movs	r2, #2
 800063a:	701a      	strb	r2, [r3, #0]
			currAccDir = None;
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <check_accel_dir+0x168>)
 800063e:	2202      	movs	r2, #2
 8000640:	701a      	strb	r2, [r3, #0]
			debug_console_log("Mold Closed\r\n");
 8000642:	4825      	ldr	r0, [pc, #148]	; (80006d8 <check_accel_dir+0x17c>)
 8000644:	f000 f9d8 	bl	80009f8 <debug_console_log>
 8000648:	e022      	b.n	8000690 <check_accel_dir+0x134>
			//(*moldClosed_cb)();
		} else if ((mold == MoldClosed) && (currAccDir == Backward)) {
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <check_accel_dir+0x174>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d10d      	bne.n	800066e <check_accel_dir+0x112>
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <check_accel_dir+0x168>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d109      	bne.n	800066e <check_accel_dir+0x112>
			mold = MoldOpening;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <check_accel_dir+0x174>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
			currAccDir = None;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <check_accel_dir+0x168>)
 8000662:	2202      	movs	r2, #2
 8000664:	701a      	strb	r2, [r3, #0]
			//(*moldOpening_cb)();
			debug_console_log("Mold Opening\r\n");
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <check_accel_dir+0x180>)
 8000668:	f000 f9c6 	bl	80009f8 <debug_console_log>
 800066c:	e010      	b.n	8000690 <check_accel_dir+0x134>
		} else if ((mold == MoldOpening) && (currAccDir == Forward)) {
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <check_accel_dir+0x174>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10c      	bne.n	8000690 <check_accel_dir+0x134>
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <check_accel_dir+0x168>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d108      	bne.n	8000690 <check_accel_dir+0x134>
//#ifndef NDEBUG
			debug_console_log("Mold Open\r\n");
 800067e:	4818      	ldr	r0, [pc, #96]	; (80006e0 <check_accel_dir+0x184>)
 8000680:	f000 f9ba 	bl	80009f8 <debug_console_log>
//#endif
			mold = MoldOpen;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <check_accel_dir+0x174>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
			currAccDir = None;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <check_accel_dir+0x168>)
 800068c:	2202      	movs	r2, #2
 800068e:	701a      	strb	r2, [r3, #0]
		}
		prevAccDir = currAccDir;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <check_accel_dir+0x168>)
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <check_accel_dir+0x188>)
 8000696:	701a      	strb	r2, [r3, #0]
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000a0 	.word	0x200000a0
 80006a4:	20000008 	.word	0x20000008
 80006a8:	2000009c 	.word	0x2000009c
 80006ac:	20000004 	.word	0x20000004
 80006b0:	20000006 	.word	0x20000006
 80006b4:	fffffc18 	.word	0xfffffc18
 80006b8:	2000000a 	.word	0x2000000a
 80006bc:	08005174 	.word	0x08005174
 80006c0:	200000b4 	.word	0x200000b4
 80006c4:	20000002 	.word	0x20000002
 80006c8:	2000000c 	.word	0x2000000c
 80006cc:	08005194 	.word	0x08005194
 80006d0:	20000000 	.word	0x20000000
 80006d4:	080051b4 	.word	0x080051b4
 80006d8:	080051c4 	.word	0x080051c4
 80006dc:	080051d4 	.word	0x080051d4
 80006e0:	080051e4 	.word	0x080051e4
 80006e4:	20000001 	.word	0x20000001

080006e8 <adc_conv_complete_custom_cb>:
/**
 * @brief  ADC Conversion complete custom callback
 * @param  None.
 * @retval None
 */
void adc_conv_complete_custom_cb(void) {
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
//#ifndef NDEBUG
	//sprintf((char*) debug_buf, "adc val = %d\r\n", adc_get_result());
	//debug_console_log((char*) debug_buf);
//#endif
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <adxl335_init>:

void adxl335_init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
	uint16_t fw_trig_mapped = map(fw_trig, -1000, 1000, yRawMin, yRawMax)
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <adxl335_init+0x88>)
 80006fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000700:	4618      	mov	r0, r3
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <adxl335_init+0x8c>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <adxl335_init+0x90>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	4613      	mov	r3, r2
 8000710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000714:	491c      	ldr	r1, [pc, #112]	; (8000788 <adxl335_init+0x94>)
 8000716:	f7ff ff05 	bl	8000524 <map>
 800071a:	4603      	mov	r3, r0
			+ adc_trig_offset;
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <adxl335_init+0x98>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
	uint16_t fw_trig_mapped = map(fw_trig, -1000, 1000, yRawMin, yRawMax)
 8000724:	4413      	add	r3, r2
 8000726:	80fb      	strh	r3, [r7, #6]
	uint16_t bw_trig_mapped = map(bw_trig, -1000, 1000, yRawMin, yRawMax)
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <adxl335_init+0x9c>)
 800072a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800072e:	4618      	mov	r0, r3
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <adxl335_init+0x8c>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <adxl335_init+0x90>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4613      	mov	r3, r2
 800073e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000742:	4911      	ldr	r1, [pc, #68]	; (8000788 <adxl335_init+0x94>)
 8000744:	f7ff feee 	bl	8000524 <map>
 8000748:	4603      	mov	r3, r0
			+ adc_trig_offset;
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <adxl335_init+0x98>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
	uint16_t bw_trig_mapped = map(bw_trig, -1000, 1000, yRawMin, yRawMax)
 8000752:	4413      	add	r3, r2
 8000754:	80bb      	strh	r3, [r7, #4]
	MX_ADC_Init(bw_trig_mapped, fw_trig_mapped);
 8000756:	88fa      	ldrh	r2, [r7, #6]
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f96f 	bl	8000a40 <MX_ADC_Init>
	adc_reg_awd_callback(check_accel_dir, adc_conv_complete_custom_cb);
 8000762:	490c      	ldr	r1, [pc, #48]	; (8000794 <adxl335_init+0xa0>)
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <adxl335_init+0xa4>)
 8000766:	f000 fa3b 	bl	8000be0 <adc_reg_awd_callback>
//#ifndef NDEBUG
	MX_USART2_UART_Init();
 800076a:	f000 f90d 	bl	8000988 <MX_USART2_UART_Init>
	debug_console_log("ADC Init Complete\r\n");
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <adxl335_init+0xa8>)
 8000770:	f000 f942 	bl	80009f8 <debug_console_log>
//#endif
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000000a 	.word	0x2000000a
 8000780:	20000004 	.word	0x20000004
 8000784:	20000006 	.word	0x20000006
 8000788:	fffffc18 	.word	0xfffffc18
 800078c:	200000a4 	.word	0x200000a4
 8000790:	2000000c 	.word	0x2000000c
 8000794:	080006e9 	.word	0x080006e9
 8000798:	0800055d 	.word	0x0800055d
 800079c:	080051f0 	.word	0x080051f0

080007a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007b0:	f023 0218 	bic.w	r2, r3, #24
 80007b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007fe:	f000 fb65 	bl	8000ecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000802:	f000 f805 	bl	8000810 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000806:	f000 f85b 	bl	80008c0 <MX_GPIO_Init>
	adxl335_init();
 800080a:	f7ff ff73 	bl	80006f4 <adxl335_init>
//	adc_reg_awd_callback(adc_awd_custom_cb, adc_conv_complete_custom_cb);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800080e:	e7fe      	b.n	800080e <main+0x14>

08000810 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b09a      	sub	sp, #104	; 0x68
 8000814:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2248      	movs	r2, #72	; 0x48
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 f860 	bl	80048e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000836:	f001 fed5 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ffb0 	bl	80007a0 <LL_RCC_LSE_SetDriveCapability>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <SystemClock_Config+0xac>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <SystemClock_Config+0xac>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <SystemClock_Config+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800085c:	2324      	movs	r3, #36	; 0x24
 800085e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000860:	2381      	movs	r3, #129	; 0x81
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f985 	bl	8002b88 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x78>
		Error_Handler();
 8000884:	f000 f874 	bl	8000970 <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000888:	234f      	movs	r3, #79	; 0x4f
 800088a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fd09 	bl	80032bc <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xa4>
		Error_Handler();
 80008b0:	f000 f85e 	bl	8000970 <Error_Handler>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3768      	adds	r7, #104	; 0x68
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58000400 	.word	0x58000400

080008c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ff78 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff ff75 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff ff72 	bl	80007ca <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80008ec:	481e      	ldr	r0, [pc, #120]	; (8000968 <MX_GPIO_Init+0xa8>)
 80008ee:	f001 fe61 	bl	80025b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 80008f2:	2200      	movs	r2, #0
 80008f4:	2138      	movs	r1, #56	; 0x38
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <MX_GPIO_Init+0xac>)
 80008f8:	f001 fe5c 	bl	80025b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 80008fc:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000900:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4815      	ldr	r0, [pc, #84]	; (8000968 <MX_GPIO_Init+0xa8>)
 8000914:	f001 fcee 	bl	80022f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000918:	2338      	movs	r3, #56	; 0x38
 800091a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_GPIO_Init+0xac>)
 800092e:	f001 fce1 	bl	80022f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000932:	2303      	movs	r3, #3
 8000934:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	2301      	movs	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f001 fcd5 	bl	80022f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0xac>)
 800095c:	f001 fcca 	bl	80022f4 <HAL_GPIO_Init>

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	48000400 	.word	0x48000400
 800096c:	48000800 	.word	0x48000800

08000970 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>

0800097a <millis>:
 *      Author: Harid
 */

#include <millis.h>

uint32_t millis(void) {
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800097e:	f000 fb11 	bl	8000fa4 <HAL_GetTick>
 8000982:	4603      	mov	r3, r0
}
 8000984:	4618      	mov	r0, r3
 8000986:	bd80      	pop	{r7, pc}

08000988 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 800098e:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <MX_USART2_UART_Init+0x6c>)
 8000990:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009d2:	f003 f972 	bl	8003cba <HAL_UART_Init>
		//TODO: Enable error handler
		//Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009da:	f003 fe91 	bl	8004700 <HAL_UARTEx_SetTxFifoThreshold>
			!= HAL_OK) {
		//TODO: Enable error handler
		//Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80009de:	2100      	movs	r1, #0
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009e2:	f003 fecb 	bl	800477c <HAL_UARTEx_SetRxFifoThreshold>
			!= HAL_OK) {
		//TODO: Enable error handler
		//Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80009e6:	4802      	ldr	r0, [pc, #8]	; (80009f0 <MX_USART2_UART_Init+0x68>)
 80009e8:	f003 fe52 	bl	8004690 <HAL_UARTEx_DisableFifoMode>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200000dc 	.word	0x200000dc
 80009f4:	40004400 	.word	0x40004400

080009f8 <debug_console_log>:

void debug_console_log(char *debug_msg) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	; 0x70
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint8_t debug_buf[100];
	strcpy((char*) debug_buf, debug_msg);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 ff94 	bl	8004934 <strcpy>
	HAL_UART_Transmit(&huart2, debug_buf, strlen((char*) debug_buf), 1000);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fbb5 	bl	8000180 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f107 010c 	add.w	r1, r7, #12
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <debug_console_log+0x38>)
 8000a24:	f003 f999 	bl	8003d5a <HAL_UART_Transmit>
}
 8000a28:	bf00      	nop
 8000a2a:	3770      	adds	r7, #112	; 0x70
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000dc 	.word	0x200000dc

08000a34 <Error_Handler>:
// TODO: Add error logs to error handler function
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
static void Error_Handler(void) {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC_Init(uint16_t low_thresh, uint16_t high_thresh) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	80bb      	strh	r3, [r7, #4]

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = { 0 };
 8000a50:	f107 0318 	add.w	r3, r7, #24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a70:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <MX_ADC_Init+0x12c>)
 8000a72:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a74:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a76:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000a7a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a88:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <MX_ADC_Init+0x128>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_ADC_Init+0x128>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <MX_ADC_Init+0x128>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000aac:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_ADC_Init+0x128>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_ADC_Init+0x128>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_ADC_Init+0x128>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_ADC_Init+0x128>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_ADC_Init+0x128>)
 8000aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_ADC_Init+0x128>)
 8000ad2:	2207      	movs	r2, #7
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_ADC_Init+0x128>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_ADC_Init+0x128>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_ADC_Init+0x128>)
 8000ae6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000aea:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000aec:	481e      	ldr	r0, [pc, #120]	; (8000b68 <MX_ADC_Init+0x128>)
 8000aee:	f000 fc65 	bl	80013bc <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC_Init+0xbc>
		Error_Handler();
 8000af8:	f7ff ff9c 	bl	8000a34 <Error_Handler>
	}
	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_ADC_Init+0x130>)
 8000afe:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000b00:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000b04:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
	AnalogWDGConfig.ITMode = ENABLE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	//TODO: Change hardcoded thresholds back to vars
	AnalogWDGConfig.HighThreshold = high_thresh;
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
	AnalogWDGConfig.LowThreshold = low_thresh;
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK) {
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4812      	ldr	r0, [pc, #72]	; (8000b68 <MX_ADC_Init+0x128>)
 8000b20:	f001 f8e0 	bl	8001ce4 <HAL_ADC_AnalogWDGConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC_Init+0xee>
		Error_Handler();
 8000b2a:	f7ff ff83 	bl	8000a34 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <MX_ADC_Init+0x128>)
 8000b42:	f000 ff97 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC_Init+0x110>
		Error_Handler();
 8000b4c:	f7ff ff72 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */
	if (HAL_ADC_Start_IT(&hadc) != HAL_OK) {
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_ADC_Init+0x128>)
 8000b52:	f000 fdf9 	bl	8001748 <HAL_ADC_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC_Init+0x120>
		Error_Handler();
 8000b5c:	f7ff ff6a 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE END ADC_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	; 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000016c 	.word	0x2000016c
 8000b6c:	40012400 	.word	0x40012400
 8000b70:	7cc00000 	.word	0x7cc00000

08000b74 <HAL_ADC_ConvCpltCallback>:
 * @param  AdcHandle : ADC handle
 * @note   This example shows a simple way to report end of conversion
 *         and get conversion result. You can add your own implementation.
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	(*adc_conv_cb)();
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_ADC_ConvCpltCallback+0x18>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4798      	blx	r3
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001d0 	.word	0x200001d0

08000b90 <HAL_ADC_LevelOutOfWindowCallback>:
/**
 * @brief  Analog watchdog callback in non blocking mode.
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	(*adc_awd_cb)();
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4798      	blx	r3
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001d4 	.word	0x200001d4

08000bac <HAL_ADC_ErrorCallback>:
 * @brief  ADC error callback in non blocking mode
 *        (ADC conversion with interruption or transfer by DMA)
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	/* In case of ADC error, call main error handler */
	Error_Handler();
 8000bb4:	f7ff ff3e 	bl	8000a34 <Error_Handler>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <adc_get_result>:

/**
 *	Get ADC result - Start conversion, wait for completion and return result
 */
uint16_t adc_get_result(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	uint16_t result = HAL_ADC_GetValue(&hadc);
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <adc_get_result+0x1c>)
 8000bc8:	f000 fe2e 	bl	8001828 <HAL_ADC_GetValue>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80fb      	strh	r3, [r7, #6]
	return result;
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000016c 	.word	0x2000016c

08000be0 <adc_reg_awd_callback>:

/**
 *	Register external adc watchdog callback
 */
void adc_reg_awd_callback(adc_awd_callback_t awd_cb, adc_conv_complete_callback_t conv_cb) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	adc_awd_cb = awd_cb;
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <adc_reg_awd_callback+0x20>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
	adc_conv_cb = conv_cb;
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <adc_reg_awd_callback+0x24>)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	200001d4 	.word	0x200001d4
 8000c04:	200001d0 	.word	0x200001d0

08000c08 <LL_AHB2_GRP1_EnableClock>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_ADC_MspInit+0x64>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d11b      	bne.n	8000cfe <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cca:	f7ff ffcd 	bl	8000c68 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff ff9a 	bl	8000c08 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HAL_ADC_MspInit+0x68>)
 8000cea:	f001 fb03 	bl	80022f4 <HAL_GPIO_Init>

    /* ADC interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	2012      	movs	r0, #18
 8000cf4:	f001 fac9 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cf8:	2012      	movs	r0, #18
 8000cfa:	f001 fae0 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40012400 	.word	0x40012400
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b096      	sub	sp, #88	; 0x58
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2238      	movs	r2, #56	; 0x38
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fdd7 	bl	80048e4 <memset>
  if(huart->Instance==USART2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d126      	bne.n	8000d8e <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d44:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d48:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fe78 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d5a:	f7ff fe09 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d62:	f7ff ff69 	bl	8000c38 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff ff4e 	bl	8000c08 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f001 fab3 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3758      	adds	r7, #88	; 0x58
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004400 	.word	0x40004400

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 f8cd 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <ADC_IRQHandler+0x10>)
 8000df2:	f000 fd25 	bl	8001840 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000016c 	.word	0x2000016c

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f003 fd2e 	bl	8004890 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20010000 	.word	0x20010000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200000a8 	.word	0x200000a8
 8000e68:	200001f0 	.word	0x200001f0

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff fff6 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopForever+0xe>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopForever+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ea6:	f003 fcf9 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eaa:	f7ff fca6 	bl	80007fa <main>

08000eae <LoopForever>:

LoopForever:
    b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   r0, =_estack
 8000eb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ebc:	0800532c 	.word	0x0800532c
  ldr r2, =_sbss
 8000ec0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ec4:	200001f0 	.word	0x200001f0

08000ec8 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <AES_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f001 f9cc 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000edc:	f002 fbd0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_Init+0x3c>)
 8000ee4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 f810 	bl	8000f0c <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e001      	b.n	8000efc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef8:	f7ff fece 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000010 	.word	0x20000010

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d024      	beq.n	8000f6a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f20:	f002 fbae 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 f9ce 	bl	80022da <HAL_SYSTICK_Config>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10f      	bne.n	8000f64 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d809      	bhi.n	8000f5e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f52:	f001 f99a 	bl	800228a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <HAL_InitTick+0x70>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e004      	b.n	8000f6e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	20000014 	.word	0x20000014

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000018 	.word	0x20000018
 8000fa0:	200001dc 	.word	0x200001dc

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200001dc 	.word	0x200001dc

08000fb8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b085      	sub	sp, #20
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2107      	movs	r1, #7
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	401a      	ands	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	431a      	orrs	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	210f      	movs	r1, #15
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0e9b      	lsrs	r3, r3, #26
 800107a:	f003 010f 	and.w	r1, r3, #15
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	431a      	orrs	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f003 0303 	and.w	r3, r3, #3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	0219      	lsls	r1, r3, #8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
 800111c:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8001120:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001124:	431a      	orrs	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d103      	bne.n	8001150 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	330c      	adds	r3, #12
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e009      	b.n	8001164 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	33a0      	adds	r3, #160	; 0xa0
 8001154:	461a      	mov	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	0d5b      	lsrs	r3, r3, #21
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
  }

  MODIFY_REG(*preg,
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f023 4303 	bic.w	r3, r3, #2197815296	; 0x83000000
 800116e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001172:	43db      	mvns	r3, r3
 8001174:	401a      	ands	r2, r3
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	400b      	ands	r3, r1
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	7cc00000 	.word	0x7cc00000

08001190 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3320      	adds	r3, #32
 80011a2:	4619      	mov	r1, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	0d1b      	lsrs	r3, r3, #20
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0419      	lsls	r1, r3, #16
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	430b      	orrs	r3, r1
 80011cc:	431a      	orrs	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011ec:	f023 0317 	bic.w	r3, r3, #23
 80011f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001216:	d101      	bne.n	800121c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001238:	f023 0317 	bic.w	r3, r3, #23
 800123c:	f043 0201 	orr.w	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <LL_ADC_IsEnabled+0x18>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <LL_ADC_IsEnabled+0x1a>
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001282:	f023 0317 	bic.w	r3, r3, #23
 8001286:	f043 0204 	orr.w	r2, r3, #4
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d101      	bne.n	80012b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	601a      	str	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	605a      	str	r2, [r3, #4]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	605a      	str	r2, [r3, #4]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	605a      	str	r2, [r3, #4]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1ae      	b.n	800173c <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fc59 	bl	8000ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fefc 	bl	8001202 <LL_ADC_IsInternalRegulatorEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d115      	bne.n	800143c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fee1 	bl	80011dc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800141a:	4b9b      	ldr	r3, [pc, #620]	; (8001688 <HAL_ADC_Init+0x2cc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	099b      	lsrs	r3, r3, #6
 8001420:	4a9a      	ldr	r2, [pc, #616]	; (800168c <HAL_ADC_Init+0x2d0>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	099b      	lsrs	r3, r3, #6
 8001428:	3301      	adds	r3, #1
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800142e:	e002      	b.n	8001436 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3b01      	subs	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f9      	bne.n	8001430 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fede 	bl	8001202 <LL_ADC_IsInternalRegulatorEnabled>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10d      	bne.n	8001468 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	f043 0210 	orr.w	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff13 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001472:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 8154 	bne.w	800172a <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 8150 	bne.w	800172a <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fed5 	bl	800124e <LL_ADC_IsEnabled>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d14f      	bne.n	800154a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f023 0118 	bic.w	r1, r3, #24
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d111      	bne.n	8001502 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014ea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80014f0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80014f6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_ADC_Init+0x2d4>)
 800150a:	4013      	ands	r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	6979      	ldr	r1, [r7, #20]
 8001512:	430b      	orrs	r3, r1
 8001514:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800151e:	d014      	beq.n	800154a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001528:	d00f      	beq.n	800154a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800152e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001532:	d00a      	beq.n	800154a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001534:	4b57      	ldr	r3, [pc, #348]	; (8001694 <HAL_ADC_Init+0x2d8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001544:	4953      	ldr	r1, [pc, #332]	; (8001694 <HAL_ADC_Init+0x2d8>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7e1b      	ldrb	r3, [r3, #24]
 800154e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7e5b      	ldrb	r3, [r3, #25]
 8001554:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001556:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7e9b      	ldrb	r3, [r3, #26]
 800155c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800155e:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001564:	2a00      	cmp	r2, #0
 8001566:	d002      	beq.n	800156e <HAL_ADC_Init+0x1b2>
 8001568:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800156c:	e000      	b.n	8001570 <HAL_ADC_Init+0x1b4>
 800156e:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001570:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001576:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b00      	cmp	r3, #0
 800157e:	da04      	bge.n	800158a <HAL_ADC_Init+0x1ce>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001588:	e001      	b.n	800158e <HAL_ADC_Init+0x1d2>
 800158a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800158e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001596:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001598:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d114      	bne.n	80015d4 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7e9b      	ldrb	r3, [r3, #26]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d104      	bne.n	80015bc <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	e00b      	b.n	80015d4 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f043 0220 	orr.w	r2, r3, #32
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015e8:	4313      	orrs	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80015fa:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_ADC_Init+0x2dc>)
 8001610:	4013      	ands	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	6979      	ldr	r1, [r7, #20]
 8001618:	430b      	orrs	r3, r1
 800161a:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	461a      	mov	r2, r3
 8001626:	2100      	movs	r1, #0
 8001628:	f7ff fce5 	bl	8000ff6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001634:	461a      	mov	r2, r3
 8001636:	4919      	ldr	r1, [pc, #100]	; (800169c <HAL_ADC_Init+0x2e0>)
 8001638:	f7ff fcdd 	bl	8000ff6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d108      	bne.n	8001656 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f062 020f 	orn	r2, r2, #15
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
 8001654:	e044      	b.n	80016e0 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800165e:	d13f      	bne.n	80016e0 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e00c      	b.n	8001680 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	2b0f      	cmp	r3, #15
 8001678:	d012      	beq.n	80016a0 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	3301      	adds	r3, #1
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d9ef      	bls.n	8001666 <HAL_ADC_Init+0x2aa>
 8001686:	e00c      	b.n	80016a2 <HAL_ADC_Init+0x2e6>
 8001688:	20000010 	.word	0x20000010
 800168c:	053e2d63 	.word	0x053e2d63
 8001690:	1ffffc02 	.word	0x1ffffc02
 8001694:	40012708 	.word	0x40012708
 8001698:	dffffc02 	.word	0xdffffc02
 800169c:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80016a0:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f062 020f 	orn	r2, r2, #15
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
 80016b8:	e012      	b.n	80016e0 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	f003 031c 	and.w	r3, r3, #28
 80016cc:	f06f 020f 	mvn.w	r2, #15
 80016d0:	fa02 f103 	lsl.w	r1, r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_ADC_Init+0x388>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d10b      	bne.n	8001708 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001706:	e018      	b.n	800173a <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f023 0312 	bic.w	r3, r3, #18
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001728:	e007      	b.n	800173a <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	f043 0210 	orr.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800173a:	7ffb      	ldrb	r3, [r7, #31]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	833fffe7 	.word	0x833fffe7

08001748 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fd9f 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d15c      	bne.n	800181a <HAL_ADC_Start_IT+0xd2>
  {
    __HAL_LOCK(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_Start_IT+0x26>
 800176a:	2302      	movs	r3, #2
 800176c:	e058      	b.n	8001820 <HAL_ADC_Start_IT+0xd8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fc06 	bl	8001f88 <ADC_Enable>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d144      	bne.n	8001810 <HAL_ADC_Start_IT+0xc8>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	221c      	movs	r2, #28
 80017a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 021c 	bic.w	r2, r2, #28
 80017be:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d108      	bne.n	80017da <HAL_ADC_Start_IT+0x92>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0208 	orr.w	r2, r2, #8
 80017d6:	605a      	str	r2, [r3, #4]
          break;
 80017d8:	e008      	b.n	80017ec <HAL_ADC_Start_IT+0xa4>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0204 	orr.w	r2, r2, #4
 80017e8:	605a      	str	r2, [r3, #4]
          break;
 80017ea:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_ADC_Start_IT+0xbc>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0210 	orr.w	r2, r2, #16
 8001802:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fd32 	bl	8001272 <LL_ADC_REG_StartConversion>
 800180e:	e006      	b.n	800181e <HAL_ADC_Start_IT+0xd6>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001818:	e001      	b.n	800181e <HAL_ADC_Start_IT+0xd6>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800181a:	2302      	movs	r3, #2
 800181c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d017      	beq.n	8001896 <HAL_ADC_IRQHandler+0x56>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fc15 	bl	80020b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <HAL_ADC_IRQHandler+0x6a>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d051      	beq.n	8001958 <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d04c      	beq.n	8001958 <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fba9 	bl	8001032 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d031      	beq.n	800194a <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7e9b      	ldrb	r3, [r3, #26]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d12d      	bne.n	800194a <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d126      	bne.n	800194a <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fcc9 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d112      	bne.n	8001932 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 020c 	bic.w	r2, r2, #12
 800191a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
 8001930:	e00b      	b.n	800194a <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f043 0220 	orr.w	r2, r3, #32
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f912 	bl	8000b74 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	220c      	movs	r2, #12
 8001956:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b00      	cmp	r3, #0
 8001960:	d011      	beq.n	8001986 <HAL_ADC_IRQHandler+0x146>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff f909 	bl	8000b90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d012      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x176>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00d      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fb74 	bl	8002094 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d012      	beq.n	80019e6 <HAL_ADC_IRQHandler+0x1a6>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fb65 	bl	80020a6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d02b      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x208>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d026      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb68 	bl	80010e2 <LL_ADC_REG_GetDMATransfer>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10e      	bne.n	8001a40 <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	f043 0202 	orr.w	r2, r3, #2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff f8b6 	bl	8000bac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2210      	movs	r2, #16
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x22c>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fb34 	bl	80020ca <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	601a      	str	r2, [r3, #0]
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x28>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e110      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x24a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fbf5 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 80f7 	bne.w	8001ca4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	f000 80b1 	beq.w	8001c22 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ace:	4a7e      	ldr	r2, [pc, #504]	; (8001cc8 <HAL_ADC_ConfigChannel+0x254>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d108      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f7ff fada 	bl	8001098 <LL_ADC_REG_SetSequencerChAdd>
 8001ae4:	e041      	b.n	8001b6a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	210f      	movs	r1, #15
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	401a      	ands	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0xa0>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	e011      	b.n	8001b38 <HAL_ADC_ConfigChannel+0xc4>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e003      	b.n	8001b38 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	6849      	ldr	r1, [r1, #4]
 8001b3c:	f001 011f 	and.w	r1, r1, #31
 8001b40:	408b      	lsls	r3, r1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d808      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff fa76 	bl	8001056 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f7ff fac0 	bl	80010fc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f280 8097 	bge.w	8001cb4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b86:	4851      	ldr	r0, [pc, #324]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001b88:	f7ff fa28 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001b8c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_ADC_ConfigChannel+0x25c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d120      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d11b      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4848      	ldr	r0, [pc, #288]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001bac:	f7ff fa04 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb0:	4b48      	ldr	r3, [pc, #288]	; (8001cd4 <HAL_ADC_ConfigChannel+0x260>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_ADC_ConfigChannel+0x264>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001bca:	e002      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bd8:	e06c      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3f      	ldr	r2, [pc, #252]	; (8001cdc <HAL_ADC_ConfigChannel+0x268>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d10c      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x18a>
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4835      	ldr	r0, [pc, #212]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001bf8:	f7ff f9de 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
 8001bfc:	e05a      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <HAL_ADC_ConfigChannel+0x26c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d155      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d150      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c18:	4619      	mov	r1, r3
 8001c1a:	482c      	ldr	r0, [pc, #176]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001c1c:	f7ff f9cc 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
 8001c20:	e048      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c2a:	d004      	beq.n	8001c36 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c30:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <HAL_ADC_ConfigChannel+0x254>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d107      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7ff fa3b 	bl	80010bc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da32      	bge.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c4e:	481f      	ldr	r0, [pc, #124]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001c50:	f7ff f9c4 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001c54:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_ADC_ConfigChannel+0x25c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d107      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c66:	4619      	mov	r1, r3
 8001c68:	4818      	ldr	r0, [pc, #96]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001c6a:	f7ff f9a5 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
 8001c6e:	e021      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_ADC_ConfigChannel+0x268>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d107      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c80:	4619      	mov	r1, r3
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001c84:	f7ff f998 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
 8001c88:	e014      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_ADC_ConfigChannel+0x26c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d10f      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_ADC_ConfigChannel+0x258>)
 8001c9e:	f7ff f98b 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8001cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	80000004 	.word	0x80000004
 8001ccc:	40012708 	.word	0x40012708
 8001cd0:	b0001000 	.word	0xb0001000
 8001cd4:	20000010 	.word	0x20000010
 8001cd8:	053e2d63 	.word	0x053e2d63
 8001cdc:	b8004000 	.word	0xb8004000
 8001ce0:	b4002000 	.word	0xb4002000

08001ce4 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_AnalogWDGConfig+0x1e>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e138      	b.n	8001f74 <HAL_ADC_AnalogWDGConfig+0x290>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fac2 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80fa 	bne.w	8001f10 <HAL_ADC_AnalogWDGConfig+0x22c>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a96      	ldr	r2, [pc, #600]	; (8001f7c <HAL_ADC_AnalogWDGConfig+0x298>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d13f      	bne.n	8001da6 <HAL_ADC_AnalogWDGConfig+0xc2>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d2e:	d00f      	beq.n	8001d50 <HAL_ADC_AnalogWDGConfig+0x6c>
 8001d30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d34:	d114      	bne.n	8001d60 <HAL_ADC_AnalogWDGConfig+0x7c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8001d42:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8001d46:	461a      	mov	r2, r3
 8001d48:	498c      	ldr	r1, [pc, #560]	; (8001f7c <HAL_ADC_AnalogWDGConfig+0x298>)
 8001d4a:	f7ff f9f3 	bl	8001134 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001d4e:	e00f      	b.n	8001d70 <HAL_ADC_AnalogWDGConfig+0x8c>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a8a      	ldr	r2, [pc, #552]	; (8001f80 <HAL_ADC_AnalogWDGConfig+0x29c>)
 8001d56:	4989      	ldr	r1, [pc, #548]	; (8001f7c <HAL_ADC_AnalogWDGConfig+0x298>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f9eb 	bl	8001134 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001d5e:	e007      	b.n	8001d70 <HAL_ADC_AnalogWDGConfig+0x8c>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	4985      	ldr	r1, [pc, #532]	; (8001f7c <HAL_ADC_AnalogWDGConfig+0x298>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f9e3 	bl	8001134 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001d6e:	bf00      	nop
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fa9b 	bl	80012bc <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	7b1b      	ldrb	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_AnalogWDGConfig+0xb6>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fab8 	bl	8001308 <LL_ADC_EnableIT_AWD1>
 8001d98:	e0ba      	b.n	8001f10 <HAL_ADC_AnalogWDGConfig+0x22c>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fadf 	bl	8001362 <LL_ADC_DisableIT_AWD1>
 8001da4:	e0b4      	b.n	8001f10 <HAL_ADC_AnalogWDGConfig+0x22c>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dae:	d063      	beq.n	8001e78 <HAL_ADC_AnalogWDGConfig+0x194>
 8001db0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001db4:	d169      	bne.n	8001e8a <HAL_ADC_AnalogWDGConfig+0x1a6>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a72      	ldr	r2, [pc, #456]	; (8001f84 <HAL_ADC_AnalogWDGConfig+0x2a0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d12d      	bne.n	8001e1c <HAL_ADC_AnalogWDGConfig+0x138>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d108      	bne.n	8001dde <HAL_ADC_AnalogWDGConfig+0xfa>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	e014      	b.n	8001e08 <HAL_ADC_AnalogWDGConfig+0x124>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	61bb      	str	r3, [r7, #24]
  return result;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_AnalogWDGConfig+0x116>
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e003      	b.n	8001e02 <HAL_ADC_AnalogWDGConfig+0x11e>
  return __builtin_clz(value);
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	2301      	movs	r3, #1
 8001e06:	4093      	lsls	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 8001e1a:	e03f      	b.n	8001e9c <HAL_ADC_AnalogWDGConfig+0x1b8>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d108      	bne.n	8001e3a <HAL_ADC_AnalogWDGConfig+0x156>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2201      	movs	r2, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	e014      	b.n	8001e64 <HAL_ADC_AnalogWDGConfig+0x180>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	60fb      	str	r3, [r7, #12]
  return result;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_AnalogWDGConfig+0x172>
    return 32U;
 8001e52:	2320      	movs	r3, #32
 8001e54:	e003      	b.n	8001e5e <HAL_ADC_AnalogWDGConfig+0x17a>
  return __builtin_clz(value);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2301      	movs	r3, #1
 8001e62:	4093      	lsls	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8001e76:	e011      	b.n	8001e9c <HAL_ADC_AnalogWDGConfig+0x1b8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3f      	ldr	r2, [pc, #252]	; (8001f80 <HAL_ADC_AnalogWDGConfig+0x29c>)
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7ff f956 	bl	8001134 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001e88:	e008      	b.n	8001e9c <HAL_ADC_AnalogWDGConfig+0x1b8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7ff f94d 	bl	8001134 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001e9a:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_ADC_AnalogWDGConfig+0x2a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d11a      	bne.n	8001edc <HAL_ADC_AnalogWDGConfig+0x1f8>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fa0c 	bl	80012d4 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	7b1b      	ldrb	r3, [r3, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_AnalogWDGConfig+0x1ec>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fa2c 	bl	8001326 <LL_ADC_EnableIT_AWD2>
 8001ece:	e01f      	b.n	8001f10 <HAL_ADC_AnalogWDGConfig+0x22c>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fa53 	bl	8001380 <LL_ADC_DisableIT_AWD2>
 8001eda:	e019      	b.n	8001f10 <HAL_ADC_AnalogWDGConfig+0x22c>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f9fe 	bl	80012ee <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_AnalogWDGConfig+0x222>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fa20 	bl	8001344 <LL_ADC_EnableIT_AWD3>
 8001f04:	e004      	b.n	8001f10 <HAL_ADC_AnalogWDGConfig+0x22c>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fa47 	bl	800139e <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_ADC_AnalogWDGConfig+0x298>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d118      	bne.n	8001f4c <HAL_ADC_AnalogWDGConfig+0x268>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4a:	e005      	b.n	8001f58 <HAL_ADC_AnalogWDGConfig+0x274>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f64:	f7ff f914 	bl	8001190 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8001f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	7cc00000 	.word	0x7cc00000
 8001f80:	0083ffff 	.word	0x0083ffff
 8001f84:	0013ffff 	.word	0x0013ffff

08001f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f958 	bl	800124e <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d169      	bne.n	8002078 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <ADC_Enable+0xfc>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e055      	b.n	800207a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f928 	bl	8001228 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fd8:	482b      	ldr	r0, [pc, #172]	; (8002088 <ADC_Enable+0x100>)
 8001fda:	f7fe ffff 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00f      	beq.n	8002008 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <ADC_Enable+0x104>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <ADC_Enable+0x108>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ffa:	e002      	b.n	8002002 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e5b      	ldrb	r3, [r3, #25]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d033      	beq.n	8002078 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002010:	f7fe ffc8 	bl	8000fa4 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002016:	e028      	b.n	800206a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f916 	bl	800124e <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f8fb 	bl	8001228 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002032:	f7fe ffb7 	bl	8000fa4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d914      	bls.n	800206a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00d      	beq.n	800206a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e007      	b.n	800207a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d1cf      	bne.n	8002018 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	80000017 	.word	0x80000017
 8002088:	40012708 	.word	0x40012708
 800208c:	20000010 	.word	0x20000010
 8002090:	053e2d63 	.word	0x053e2d63

08002094 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4906      	ldr	r1, [pc, #24]	; (8002174 <__NVIC_EnableIRQ+0x34>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff90 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff2d 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff44 	bl	8002124 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff92 	bl	80021cc <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff61 	bl	8002178 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff37 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa4 	bl	8002230 <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e140      	b.n	8002586 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8132 	beq.w	8002580 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d005      	beq.n	8002334 <HAL_GPIO_Init+0x40>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d130      	bne.n	8002396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236a:	2201      	movs	r2, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0201 	and.w	r2, r3, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d017      	beq.n	80023d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d123      	bne.n	8002426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	08da      	lsrs	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3208      	adds	r2, #8
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	6939      	ldr	r1, [r7, #16]
 8002422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808c 	beq.w	8002580 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	2207      	movs	r2, #7
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x1bc>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <HAL_GPIO_Init+0x2b4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x1b8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a43      	ldr	r2, [pc, #268]	; (80025ac <HAL_GPIO_Init+0x2b8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_GPIO_Init+0x1b4>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1be>
 80024a8:	2307      	movs	r3, #7
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1be>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1be>
 80024b0:	2300      	movs	r3, #0
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 80024d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80024f6:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002504:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800257a:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_GPIO_Init+0x2bc>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f aeb7 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	58000800 	.word	0x58000800

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a03      	ldr	r2, [pc, #12]	; (80025fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	58000400 	.word	0x58000400

08002600 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_PWREx_GetVoltageRange+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	58000400 	.word	0x58000400

08002618 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d101      	bne.n	800262e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	58000400 	.word	0x58000400

0800263c <LL_RCC_HSE_EnableTcxo>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <LL_RCC_HSE_DisableTcxo>:
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002686:	d101      	bne.n	800268c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <LL_RCC_HSE_Enable>:
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <LL_RCC_HSE_Disable>:
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_HSE_IsReady>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e0:	d101      	bne.n	80026e6 <LL_RCC_HSE_IsReady+0x18>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_RCC_HSE_IsReady+0x1a>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <LL_RCC_HSI_Enable>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <LL_RCC_HSI_Disable>:
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_RCC_HSI_IsReady>:
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d101      	bne.n	8002740 <LL_RCC_HSI_IsReady+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_RCC_HSI_IsReady+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <LL_RCC_HSI_SetCalibTrimming>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d101      	bne.n	800278a <LL_RCC_LSE_IsReady+0x18>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_RCC_LSE_IsReady+0x1a>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d101      	bne.n	80027ec <LL_RCC_LSI_IsReady+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_RCC_LSI_IsReady+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d101      	bne.n	8002844 <LL_RCC_MSI_IsReady+0x16>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_RCC_MSI_IsReady+0x18>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b08      	cmp	r3, #8
 800285e:	d101      	bne.n	8002864 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002960:	f023 020f 	bic.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6e:	d101      	bne.n	8002a74 <LL_RCC_PLL_IsReady+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_RCC_PLL_IsReady+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d101      	bne.n	8002af0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b0e:	d101      	bne.n	8002b14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d101      	bne.n	8002b38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b54:	d101      	bne.n	8002b5a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b76:	d101      	bne.n	8002b7c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e38a      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9a:	f7ff fea6 	bl	80028ea <LL_RCC_GetSysClkSource>
 8002b9e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba0:	f7ff ff8f 	bl	8002ac2 <LL_RCC_PLL_GetMainSource>
 8002ba4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80c9 	beq.w	8002d46 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x3e>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d17b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d178      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	f7ff fe32 	bl	800282e <LL_RCC_MSI_IsReady>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x54>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e369      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x72>
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf8:	e006      	b.n	8002c08 <HAL_RCC_OscConfig+0x80>
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d222      	bcs.n	8002c52 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fd6d 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e347      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2a:	f043 0308 	orr.w	r3, r3, #8
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fe26 	bl	800289c <LL_RCC_MSI_SetCalibTrimming>
 8002c50:	e021      	b.n	8002c96 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe0d 	bl	800289c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fd32 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e30c      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c96:	f000 fcf3 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4ab4      	ldr	r2, [pc, #720]	; (8002f70 <HAL_RCC_OscConfig+0x3e8>)
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ca0:	4bb4      	ldr	r3, [pc, #720]	; (8002f74 <HAL_RCC_OscConfig+0x3ec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f931 	bl	8000f0c <HAL_InitTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d047      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	e2fb      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cc0:	f7ff fd99 	bl	80027f6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f96e 	bl	8000fa4 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ccc:	f7fe f96a 	bl	8000fa4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e2e8      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cde:	f7ff fda6 	bl	800282e <LL_RCC_MSI_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f1      	beq.n	8002ccc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fdc2 	bl	800289c <LL_RCC_MSI_SetCalibTrimming>
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d1a:	f7ff fd7a 	bl	8002812 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe f941 	bl	8000fa4 <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d26:	f7fe f93d 	bl	8000fa4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e2bb      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d38:	f7ff fd79 	bl	800282e <LL_RCC_MSI_IsReady>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f1      	bne.n	8002d26 <HAL_RCC_OscConfig+0x19e>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d44:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d05f      	beq.n	8002e12 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1dc>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d10d      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d10a      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	f7ff fcb3 	bl	80026ce <LL_RCC_HSE_IsReady>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d050      	beq.n	8002e10 <HAL_RCC_OscConfig+0x288>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d14c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e29a      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_OscConfig+0x218>
 8002d9a:	f7ff fc7c 	bl	8002696 <LL_RCC_HSE_Enable>
 8002d9e:	e00d      	b.n	8002dbc <HAL_RCC_OscConfig+0x234>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002da8:	d104      	bne.n	8002db4 <HAL_RCC_OscConfig+0x22c>
 8002daa:	f7ff fc47 	bl	800263c <LL_RCC_HSE_EnableTcxo>
 8002dae:	f7ff fc72 	bl	8002696 <LL_RCC_HSE_Enable>
 8002db2:	e003      	b.n	8002dbc <HAL_RCC_OscConfig+0x234>
 8002db4:	f7ff fc7d 	bl	80026b2 <LL_RCC_HSE_Disable>
 8002db8:	f7ff fc4e 	bl	8002658 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d012      	beq.n	8002dea <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f8ee 	bl	8000fa4 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe f8ea 	bl	8000fa4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e268      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dde:	f7ff fc76 	bl	80026ce <LL_RCC_HSE_IsReady>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f1      	beq.n	8002dcc <HAL_RCC_OscConfig+0x244>
 8002de8:	e013      	b.n	8002e12 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe f8db 	bl	8000fa4 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df2:	f7fe f8d7 	bl	8000fa4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	; 0x64
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e255      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e04:	f7ff fc63 	bl	80026ce <LL_RCC_HSE_IsReady>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f1      	bne.n	8002df2 <HAL_RCC_OscConfig+0x26a>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2a8>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d113      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d110      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	f7ff fc7a 	bl	8002728 <LL_RCC_HSI_IsReady>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x2be>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e234      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fc7d 	bl	800274a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e50:	e031      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d019      	beq.n	8002e8e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5a:	f7ff fc49 	bl	80026f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f8a1 	bl	8000fa4 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe f89d 	bl	8000fa4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e21b      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e78:	f7ff fc56 	bl	8002728 <LL_RCC_HSI_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f1      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fc5f 	bl	800274a <LL_RCC_HSI_SetCalibTrimming>
 8002e8c:	e013      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	f7ff fc3d 	bl	800270c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe f887 	bl	8000fa4 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fe f883 	bl	8000fa4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e201      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002eac:	f7ff fc3c 	bl	8002728 <LL_RCC_HSI_IsReady>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f1      	bne.n	8002e9a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06e      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d056      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d031      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1da      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f04:	f7ff fc56 	bl	80027b4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f08:	f7fe f84c 	bl	8000fa4 <HAL_GetTick>
 8002f0c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fe f848 	bl	8000fa4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b11      	cmp	r3, #17
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1c6      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f22:	f7ff fc57 	bl	80027d4 <LL_RCC_LSI_IsReady>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f1      	bne.n	8002f10 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f34:	f023 0210 	bic.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	f7ff fc25 	bl	8002794 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f82b 	bl	8000fa4 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe f827 	bl	8000fa4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b11      	cmp	r3, #17
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1a5      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f64:	f7ff fc36 	bl	80027d4 <LL_RCC_LSI_IsReady>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f1      	beq.n	8002f52 <HAL_RCC_OscConfig+0x3ca>
 8002f6e:	e017      	b.n	8002fa0 <HAL_RCC_OscConfig+0x418>
 8002f70:	20000010 	.word	0x20000010
 8002f74:	20000014 	.word	0x20000014
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	f7ff fc1c 	bl	80027b4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f812 	bl	8000fa4 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fe f80e 	bl	8000fa4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b11      	cmp	r3, #17
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e18c      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f96:	f7ff fc1d 	bl	80027d4 <LL_RCC_LSI_IsReady>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f1      	bne.n	8002f84 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80d8 	beq.w	800315e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fae:	f7ff fb33 	bl	8002618 <LL_PWR_IsEnabledBkUpAccess>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d113      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fb8:	f7ff fb14 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbc:	f7fd fff2 	bl	8000fa4 <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc4:	f7fd ffee 	bl	8000fa4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e16c      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fd6:	f7ff fb1f 	bl	8002618 <LL_PWR_IsEnabledBkUpAccess>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f1      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d07b      	beq.n	80030e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b85      	cmp	r3, #133	; 0x85
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d109      	bne.n	800300c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fd ffca 	bl	8000fa4 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fd ffbc 	bl	8000fa4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e138      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800303e:	f7ff fb98 	bl	8002772 <LL_RCC_LSE_IsReady>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ef      	beq.n	8003028 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b81      	cmp	r3, #129	; 0x81
 800304e:	d003      	beq.n	8003058 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b85      	cmp	r3, #133	; 0x85
 8003056:	d121      	bne.n	800309c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fd ffa4 	bl	8000fa4 <HAL_GetTick>
 800305c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fd ff96 	bl	8000fa4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e112      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ec      	beq.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800309a:	e060      	b.n	800315e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fd ff82 	bl	8000fa4 <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fd ff74 	bl	8000fa4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0f0      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ec      	bne.n	80030b8 <HAL_RCC_OscConfig+0x530>
 80030de:	e03e      	b.n	800315e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd ff60 	bl	8000fa4 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fd ff52 	bl	8000fa4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0ce      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ec      	bne.n	80030fc <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fd ff3f 	bl	8000fa4 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fd ff31 	bl	8000fa4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0ad      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003154:	f7ff fb0d 	bl	8002772 <LL_RCC_LSE_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1ef      	bne.n	800313e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80a3 	beq.w	80032ae <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d076      	beq.n	800325c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	2b02      	cmp	r3, #2
 8003174:	d14b      	bne.n	800320e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	f7ff fc63 	bl	8002a40 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fd ff13 	bl	8000fa4 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fd ff0f 	bl	8000fa4 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b0a      	cmp	r3, #10
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e08d      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003194:	f7ff fc62 	bl	8002a5c <LL_RCC_PLL_IsReady>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f1      	bne.n	8003182 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800319e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <HAL_RCC_OscConfig+0x730>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031b6:	0212      	lsls	r2, r2, #8
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031c4:	4311      	orrs	r1, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031ca:	430a      	orrs	r2, r1
 80031cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	f7ff fc26 	bl	8002a24 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fd fedc 	bl	8000fa4 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fd fed8 	bl	8000fa4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e056      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003202:	f7ff fc2b 	bl	8002a5c <LL_RCC_PLL_IsReady>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f1      	beq.n	80031f0 <HAL_RCC_OscConfig+0x668>
 800320c:	e04f      	b.n	80032ae <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	f7ff fc17 	bl	8002a40 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321c:	f023 0303 	bic.w	r3, r3, #3
 8003220:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fd feb5 	bl	8000fa4 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fd feb1 	bl	8000fa4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b0a      	cmp	r3, #10
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e02f      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003250:	f7ff fc04 	bl	8002a5c <LL_RCC_PLL_IsReady>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f1      	bne.n	800323e <HAL_RCC_OscConfig+0x6b6>
 800325a:	e028      	b.n	80032ae <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e023      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	429a      	cmp	r2, r3
 800327c:	d115      	bne.n	80032aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	429a      	cmp	r2, r3
 800328a:	d10e      	bne.n	80032aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	429a      	cmp	r2, r3
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	11c1808c 	.word	0x11c1808c

080032bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e12c      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d0:	4b98      	ldr	r3, [pc, #608]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d91b      	bls.n	8003316 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b95      	ldr	r3, [pc, #596]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 0207 	bic.w	r2, r3, #7
 80032e6:	4993      	ldr	r1, [pc, #588]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ee:	f7fd fe59 	bl	8000fa4 <HAL_GetTick>
 80032f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032f6:	f7fd fe55 	bl	8000fa4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e110      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003308:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d1ef      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff faea 	bl	8002900 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800332c:	f7fd fe3a 	bl	8000fa4 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003334:	f7fd fe36 	bl	8000fa4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0f1      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003346:	f7ff fbc7 	bl	8002ad8 <LL_RCC_IsActiveFlag_HPRE>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f1      	beq.n	8003334 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d016      	beq.n	800338a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fae0 	bl	8002926 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003366:	f7fd fe1d 	bl	8000fa4 <HAL_GetTick>
 800336a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800336e:	f7fd fe19 	bl	8000fa4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0d4      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003380:	f7ff fbbb 	bl	8002afa <LL_RCC_IsActiveFlag_C2HPRE>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f1      	beq.n	800336e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fad8 	bl	8002950 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033a0:	f7fd fe00 	bl	8000fa4 <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033a8:	f7fd fdfc 	bl	8000fa4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0b7      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033ba:	f7ff fbb0 	bl	8002b1e <LL_RCC_IsActiveFlag_SHDHPRE>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f1      	beq.n	80033a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fad1 	bl	800297c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033da:	f7fd fde3 	bl	8000fa4 <HAL_GetTick>
 80033de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033e2:	f7fd fddf 	bl	8000fa4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e09a      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033f4:	f7ff fba5 	bl	8002b42 <LL_RCC_IsActiveFlag_PPRE1>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f1      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fac6 	bl	80029a2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003416:	f7fd fdc5 	bl	8000fa4 <HAL_GetTick>
 800341a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800341e:	f7fd fdc1 	bl	8000fa4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e07c      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003430:	f7ff fb98 	bl	8002b64 <LL_RCC_IsActiveFlag_PPRE2>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f1      	beq.n	800341e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d043      	beq.n	80034ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d106      	bne.n	800345c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800344e:	f7ff f93e 	bl	80026ce <LL_RCC_HSE_IsReady>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11e      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e066      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d106      	bne.n	8003472 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003464:	f7ff fafa 	bl	8002a5c <LL_RCC_PLL_IsReady>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d113      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e05b      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800347a:	f7ff f9d8 	bl	800282e <LL_RCC_MSI_IsReady>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d108      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e050      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003488:	f7ff f94e 	bl	8002728 <LL_RCC_HSI_IsReady>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e049      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fa12 	bl	80028c4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fd fd80 	bl	8000fa4 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fd fd7c 	bl	8000fa4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e035      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	f7ff fa14 	bl	80028ea <LL_RCC_GetSysClkSource>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d1ec      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d21b      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 0207 	bic.w	r2, r3, #7
 80034e4:	4913      	ldr	r1, [pc, #76]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ec:	f7fd fd5a 	bl	8000fa4 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034f4:	f7fd fd56 	bl	8000fa4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e011      	b.n	800352a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_ClockConfig+0x278>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d1ef      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003514:	f000 f8b4 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8003518:	4603      	mov	r3, r0
 800351a:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_RCC_ClockConfig+0x27c>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_RCC_ClockConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fcf2 	bl	8000f0c <HAL_InitTick>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58004000 	.word	0x58004000
 8003538:	20000010 	.word	0x20000010
 800353c:	20000014 	.word	0x20000014

08003540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	f7ff f9cc 	bl	80028ea <LL_RCC_GetSysClkSource>
 8003552:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003554:	f7ff fab5 	bl	8002ac2 <LL_RCC_PLL_GetMainSource>
 8003558:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x2c>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d139      	bne.n	80035da <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d136      	bne.n	80035da <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800356c:	f7ff f96f 	bl	800284e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x62>
 8003576:	f7ff f96a 	bl	800284e <LL_RCC_MSI_IsEnabledRangeSelect>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x4e>
 8003580:	f7ff f975 	bl	800286e <LL_RCC_MSI_GetRange>
 8003584:	4603      	mov	r3, r0
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	e005      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x5a>
 800358e:	f7ff f979 	bl	8002884 <LL_RCC_MSI_GetRangeAfterStandby>
 8003592:	4603      	mov	r3, r0
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a36      	ldr	r2, [pc, #216]	; (8003674 <HAL_RCC_GetSysClockFreq+0x134>)
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	e014      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x8c>
 80035a2:	f7ff f954 	bl	800284e <LL_RCC_MSI_IsEnabledRangeSelect>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x7a>
 80035ac:	f7ff f95f 	bl	800286e <LL_RCC_MSI_GetRange>
 80035b0:	4603      	mov	r3, r0
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	e005      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x86>
 80035ba:	f7ff f963 	bl	8002884 <LL_RCC_MSI_GetRangeAfterStandby>
 80035be:	4603      	mov	r3, r0
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <HAL_RCC_GetSysClockFreq+0x134>)
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d115      	bne.n	8003600 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035d8:	e012      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d102      	bne.n	80035e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_GetSysClockFreq+0x138>)
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e00c      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d109      	bne.n	8003600 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035ec:	f7ff f842 	bl	8002674 <LL_RCC_HSE_IsEnabledDiv2>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_GetSysClockFreq+0x138>)
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e001      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_RCC_GetSysClockFreq+0x13c>)
 80035fe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003600:	f7ff f973 	bl	80028ea <LL_RCC_GetSysClkSource>
 8003604:	4603      	mov	r3, r0
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d12f      	bne.n	800366a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800360a:	f7ff fa5a 	bl	8002ac2 <LL_RCC_PLL_GetMainSource>
 800360e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0xde>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d003      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0xe4>
 800361c:	e00d      	b.n	800363a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <HAL_RCC_GetSysClockFreq+0x138>)
 8003620:	60fb      	str	r3, [r7, #12]
        break;
 8003622:	e00d      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003624:	f7ff f826 	bl	8002674 <LL_RCC_HSE_IsEnabledDiv2>
 8003628:	4603      	mov	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_GetSysClockFreq+0x138>)
 8003630:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003632:	e005      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003636:	60fb      	str	r3, [r7, #12]
        break;
 8003638:	e002      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	60fb      	str	r3, [r7, #12]
        break;
 800363e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003640:	f7ff fa1d 	bl	8002a7e <LL_RCC_PLL_GetN>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	fb03 f402 	mul.w	r4, r3, r2
 800364c:	f7ff fa2e 	bl	8002aac <LL_RCC_PLL_GetDivider>
 8003650:	4603      	mov	r3, r0
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	3301      	adds	r3, #1
 8003656:	fbb4 f4f3 	udiv	r4, r4, r3
 800365a:	f7ff fa1c 	bl	8002a96 <LL_RCC_PLL_GetR>
 800365e:	4603      	mov	r3, r0
 8003660:	0f5b      	lsrs	r3, r3, #29
 8003662:	3301      	adds	r3, #1
 8003664:	fbb4 f3f3 	udiv	r3, r4, r3
 8003668:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800366a:	697b      	ldr	r3, [r7, #20]
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	08005280 	.word	0x08005280
 8003678:	00f42400 	.word	0x00f42400
 800367c:	01e84800 	.word	0x01e84800

08003680 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b598      	push	{r3, r4, r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003684:	f7ff ff5c 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 8003688:	4604      	mov	r4, r0
 800368a:	f7ff f99d 	bl	80029c8 <LL_RCC_GetAHBPrescaler>
 800368e:	4603      	mov	r3, r0
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd98      	pop	{r3, r4, r7, pc}
 80036a4:	08005220 	.word	0x08005220

080036a8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b598      	push	{r3, r4, r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80036ac:	f7ff ffe8 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036b0:	4604      	mov	r4, r0
 80036b2:	f7ff f9a1 	bl	80029f8 <LL_RCC_GetAPB1Prescaler>
 80036b6:	4603      	mov	r3, r0
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd98      	pop	{r3, r4, r7, pc}
 80036c8:	08005260 	.word	0x08005260

080036cc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b598      	push	{r3, r4, r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036d0:	f7ff ffd6 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036d4:	4604      	mov	r4, r0
 80036d6:	f7ff f99a 	bl	8002a0e <LL_RCC_GetAPB2Prescaler>
 80036da:	4603      	mov	r3, r0
 80036dc:	0adb      	lsrs	r3, r3, #11
 80036de:	4a03      	ldr	r2, [pc, #12]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd98      	pop	{r3, r4, r7, pc}
 80036ec:	08005260 	.word	0x08005260

080036f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	4a10      	ldr	r2, [pc, #64]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003708:	f7ff f969 	bl	80029de <LL_RCC_GetAHB3Prescaler>
 800370c:	4603      	mov	r3, r0
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9c      	lsrs	r4, r3, #18
 800372c:	f7fe ff68 	bl	8002600 <HAL_PWREx_GetVoltageRange>
 8003730:	4603      	mov	r3, r0
 8003732:	4619      	mov	r1, r3
 8003734:	4620      	mov	r0, r4
 8003736:	f000 f80b 	bl	8003750 <RCC_SetFlashLatency>
 800373a:	4603      	mov	r3, r0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	08005280 	.word	0x08005280
 8003748:	08005220 	.word	0x08005220
 800374c:	431bde83 	.word	0x431bde83

08003750 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08e      	sub	sp, #56	; 0x38
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800375a:	4a3c      	ldr	r2, [pc, #240]	; (800384c <RCC_SetFlashLatency+0xfc>)
 800375c:	f107 0320 	add.w	r3, r7, #32
 8003760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003764:	6018      	str	r0, [r3, #0]
 8003766:	3304      	adds	r3, #4
 8003768:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800376a:	4a39      	ldr	r2, [pc, #228]	; (8003850 <RCC_SetFlashLatency+0x100>)
 800376c:	f107 0318 	add.w	r3, r7, #24
 8003770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003774:	6018      	str	r0, [r3, #0]
 8003776:	3304      	adds	r3, #4
 8003778:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800377a:	4a36      	ldr	r2, [pc, #216]	; (8003854 <RCC_SetFlashLatency+0x104>)
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	ca07      	ldmia	r2, {r0, r1, r2}
 8003782:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003790:	d11d      	bne.n	80037ce <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003792:	2300      	movs	r3, #0
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
 8003796:	e016      	b.n	80037c6 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037a0:	4413      	add	r3, r2
 80037a2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80037a6:	461a      	mov	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d808      	bhi.n	80037c0 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037b6:	4413      	add	r3, r2
 80037b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037be:	e023      	b.n	8003808 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	3301      	adds	r3, #1
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d9e5      	bls.n	8003798 <RCC_SetFlashLatency+0x48>
 80037cc:	e01c      	b.n	8003808 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	e016      	b.n	8003802 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037dc:	4413      	add	r3, r2
 80037de:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d808      	bhi.n	80037fc <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037f2:	4413      	add	r3, r2
 80037f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037fa:	e005      	b.n	8003808 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	3301      	adds	r3, #1
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	2b02      	cmp	r3, #2
 8003806:	d9e5      	bls.n	80037d4 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <RCC_SetFlashLatency+0x108>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 0207 	bic.w	r2, r3, #7
 8003810:	4911      	ldr	r1, [pc, #68]	; (8003858 <RCC_SetFlashLatency+0x108>)
 8003812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003818:	f7fd fbc4 	bl	8000fa4 <HAL_GetTick>
 800381c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800381e:	e008      	b.n	8003832 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003820:	f7fd fbc0 	bl	8000fa4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e007      	b.n	8003842 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <RCC_SetFlashLatency+0x108>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800383c:	429a      	cmp	r2, r3
 800383e:	d1ef      	bne.n	8003820 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3738      	adds	r7, #56	; 0x38
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	08005204 	.word	0x08005204
 8003850:	0800520c 	.word	0x0800520c
 8003854:	08005214 	.word	0x08005214
 8003858:	58004000 	.word	0x58004000

0800385c <LL_RCC_LSE_IsReady>:
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d101      	bne.n	8003874 <LL_RCC_LSE_IsReady+0x18>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <LL_RCC_LSE_IsReady+0x1a>
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <LL_RCC_SetUSARTClockSource>:
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	43db      	mvns	r3, r3
 8003894:	401a      	ands	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <LL_RCC_SetI2SClockSource>:
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <LL_RCC_SetLPUARTClockSource>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_RCC_SetI2CClockSource>:
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800391a:	43db      	mvns	r3, r3
 800391c:	401a      	ands	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <LL_RCC_SetLPTIMClockSource>:
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	43db      	mvns	r3, r3
 8003952:	401a      	ands	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <LL_RCC_SetRNGClockSource>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <LL_RCC_SetADCClockSource>:
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <LL_RCC_SetRTCClockSource>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_GetRTCClockSource>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_ForceBackupDomainReset>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003a50:	2300      	movs	r3, #0
 8003a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d058      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003a64:	f7fe fdbe 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fa9c 	bl	8000fa4 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a6e:	e009      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7fd fa98 	bl	8000fa4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	74fb      	strb	r3, [r7, #19]
        break;
 8003a82:	e006      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a84:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a90:	d1ee      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d13c      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a98:	f7ff ffa7 	bl	80039ea <LL_RCC_GetRTCClockSource>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d00f      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab4:	f7ff ffa5 	bl	8003a02 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab8:	f7ff ffb3 	bl	8003a22 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d014      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fa68 	bl	8000fa4 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fa64 	bl	8000fa4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d902      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	74fb      	strb	r3, [r7, #19]
            break;
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003af0:	f7ff feb4 	bl	800385c <LL_RCC_LSE_IsReady>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d1ee      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff5b 	bl	80039c0 <LL_RCC_SetRTCClockSource>
 8003b0a:	e004      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
 8003b10:	e001      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fea9 	bl	800387e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fe9e 	bl	800387e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fec0 	bl	80038d8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fee6 	bl	800393a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fedb 	bl	800393a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fed0 	bl	800393a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fea9 	bl	8003902 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fe9e 	bl	8003902 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fe93 	bl	8003902 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d011      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fe5e 	bl	80038ae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fea5 	bl	800396c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fea3 	bl	8003996 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c58:	d107      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003c6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	58000400 	.word	0x58000400

08003c78 <LL_RCC_GetUSARTClockSource>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	4313      	orrs	r3, r2
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_GetLPUARTClockSource>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4013      	ands	r3, r2
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e042      	b.n	8003d52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd f816 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f8c3 	bl	8003e88 <UART_SetConfig>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e022      	b.n	8003d52 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fb07 	bl	8004328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fb8d 	bl	800446a <UART_CheckIdleState>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	; 0x28
 8003d5e:	af02      	add	r7, sp, #8
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	f040 8083 	bne.w	8003e7c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_Transmit+0x28>
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e07b      	b.n	8003e7e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Transmit+0x3a>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e074      	b.n	8003e7e <HAL_UART_Transmit+0x124>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2221      	movs	r2, #33	; 0x21
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dac:	f7fd f8fa 	bl	8000fa4 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d108      	bne.n	8003dde <HAL_UART_Transmit+0x84>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e003      	b.n	8003de6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003dee:	e02c      	b.n	8003e4a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fb80 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e039      	b.n	8003e7e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	3302      	adds	r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e007      	b.n	8003e38 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cc      	bne.n	8003df0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fb4d 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4bab      	ldr	r3, [pc, #684]	; (8004160 <UART_SetConfig+0x2d8>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	69f9      	ldr	r1, [r7, #28]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4aa0      	ldr	r2, [pc, #640]	; (8004164 <UART_SetConfig+0x2dc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003efa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f023 010f 	bic.w	r1, r3, #15
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a91      	ldr	r2, [pc, #580]	; (8004168 <UART_SetConfig+0x2e0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d122      	bne.n	8003f6e <UART_SetConfig+0xe6>
 8003f28:	2003      	movs	r0, #3
 8003f2a:	f7ff fea5 	bl	8003c78 <LL_RCC_GetUSARTClockSource>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d817      	bhi.n	8003f68 <UART_SetConfig+0xe0>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0xb8>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f5d 	.word	0x08003f5d
 8003f48:	08003f57 	.word	0x08003f57
 8003f4c:	08003f63 	.word	0x08003f63
 8003f50:	2301      	movs	r3, #1
 8003f52:	76fb      	strb	r3, [r7, #27]
 8003f54:	e072      	b.n	800403c <UART_SetConfig+0x1b4>
 8003f56:	2302      	movs	r3, #2
 8003f58:	76fb      	strb	r3, [r7, #27]
 8003f5a:	e06f      	b.n	800403c <UART_SetConfig+0x1b4>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	76fb      	strb	r3, [r7, #27]
 8003f60:	e06c      	b.n	800403c <UART_SetConfig+0x1b4>
 8003f62:	2308      	movs	r3, #8
 8003f64:	76fb      	strb	r3, [r7, #27]
 8003f66:	e069      	b.n	800403c <UART_SetConfig+0x1b4>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	e066      	b.n	800403c <UART_SetConfig+0x1b4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7e      	ldr	r2, [pc, #504]	; (800416c <UART_SetConfig+0x2e4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d134      	bne.n	8003fe2 <UART_SetConfig+0x15a>
 8003f78:	200c      	movs	r0, #12
 8003f7a:	f7ff fe7d 	bl	8003c78 <LL_RCC_GetUSARTClockSource>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d829      	bhi.n	8003fdc <UART_SetConfig+0x154>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x108>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fdd 	.word	0x08003fdd
 8003f9c:	08003fdd 	.word	0x08003fdd
 8003fa0:	08003fd1 	.word	0x08003fd1
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08003fdd 	.word	0x08003fdd
 8003fb0:	08003fcb 	.word	0x08003fcb
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fdd 	.word	0x08003fdd
 8003fc0:	08003fd7 	.word	0x08003fd7
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e038      	b.n	800403c <UART_SetConfig+0x1b4>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e035      	b.n	800403c <UART_SetConfig+0x1b4>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	76fb      	strb	r3, [r7, #27]
 8003fd4:	e032      	b.n	800403c <UART_SetConfig+0x1b4>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	76fb      	strb	r3, [r7, #27]
 8003fda:	e02f      	b.n	800403c <UART_SetConfig+0x1b4>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	76fb      	strb	r3, [r7, #27]
 8003fe0:	e02c      	b.n	800403c <UART_SetConfig+0x1b4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5f      	ldr	r2, [pc, #380]	; (8004164 <UART_SetConfig+0x2dc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d125      	bne.n	8004038 <UART_SetConfig+0x1b0>
 8003fec:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003ff0:	f7ff fe54 	bl	8003c9c <LL_RCC_GetLPUARTClockSource>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffa:	d017      	beq.n	800402c <UART_SetConfig+0x1a4>
 8003ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004000:	d817      	bhi.n	8004032 <UART_SetConfig+0x1aa>
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	d00b      	beq.n	8004020 <UART_SetConfig+0x198>
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400c:	d811      	bhi.n	8004032 <UART_SetConfig+0x1aa>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <UART_SetConfig+0x192>
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d006      	beq.n	8004026 <UART_SetConfig+0x19e>
 8004018:	e00b      	b.n	8004032 <UART_SetConfig+0x1aa>
 800401a:	2300      	movs	r3, #0
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e00d      	b.n	800403c <UART_SetConfig+0x1b4>
 8004020:	2302      	movs	r3, #2
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e00a      	b.n	800403c <UART_SetConfig+0x1b4>
 8004026:	2304      	movs	r3, #4
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e007      	b.n	800403c <UART_SetConfig+0x1b4>
 800402c:	2308      	movs	r3, #8
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e004      	b.n	800403c <UART_SetConfig+0x1b4>
 8004032:	2310      	movs	r3, #16
 8004034:	76fb      	strb	r3, [r7, #27]
 8004036:	e001      	b.n	800403c <UART_SetConfig+0x1b4>
 8004038:	2310      	movs	r3, #16
 800403a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a48      	ldr	r2, [pc, #288]	; (8004164 <UART_SetConfig+0x2dc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	f040 8098 	bne.w	8004178 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004048:	7efb      	ldrb	r3, [r7, #27]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d823      	bhi.n	8004096 <UART_SetConfig+0x20e>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0x1cc>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004079 	.word	0x08004079
 8004058:	08004097 	.word	0x08004097
 800405c:	08004081 	.word	0x08004081
 8004060:	08004097 	.word	0x08004097
 8004064:	08004087 	.word	0x08004087
 8004068:	08004097 	.word	0x08004097
 800406c:	08004097 	.word	0x08004097
 8004070:	08004097 	.word	0x08004097
 8004074:	0800408f 	.word	0x0800408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004078:	f7ff fb16 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 800407c:	6178      	str	r0, [r7, #20]
        break;
 800407e:	e00f      	b.n	80040a0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004080:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <UART_SetConfig+0x2e8>)
 8004082:	617b      	str	r3, [r7, #20]
        break;
 8004084:	e00c      	b.n	80040a0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7ff fa5b 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 800408a:	6178      	str	r0, [r7, #20]
        break;
 800408c:	e008      	b.n	80040a0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004092:	617b      	str	r3, [r7, #20]
        break;
 8004094:	e004      	b.n	80040a0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	76bb      	strb	r3, [r7, #26]
        break;
 800409e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8128 	beq.w	80042f8 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	4a31      	ldr	r2, [pc, #196]	; (8004174 <UART_SetConfig+0x2ec>)
 80040ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b2:	461a      	mov	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d305      	bcc.n	80040d8 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	76bb      	strb	r3, [r7, #26]
 80040dc:	e10c      	b.n	80042f8 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	4a22      	ldr	r2, [pc, #136]	; (8004174 <UART_SetConfig+0x2ec>)
 80040ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	f7fc f89b 	bl	8000230 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	020b      	lsls	r3, r1, #8
 800410c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004110:	0202      	lsls	r2, r0, #8
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	6849      	ldr	r1, [r1, #4]
 8004116:	0849      	lsrs	r1, r1, #1
 8004118:	4608      	mov	r0, r1
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	1814      	adds	r4, r2, r0
 8004120:	eb43 0501 	adc.w	r5, r3, r1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	461a      	mov	r2, r3
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc f87d 	bl	8000230 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4613      	mov	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004144:	d308      	bcc.n	8004158 <UART_SetConfig+0x2d0>
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414c:	d204      	bcs.n	8004158 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	e0cf      	b.n	80042f8 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	76bb      	strb	r3, [r7, #26]
 800415c:	e0cc      	b.n	80042f8 <UART_SetConfig+0x470>
 800415e:	bf00      	nop
 8004160:	cfff69f3 	.word	0xcfff69f3
 8004164:	40008000 	.word	0x40008000
 8004168:	40013800 	.word	0x40013800
 800416c:	40004400 	.word	0x40004400
 8004170:	00f42400 	.word	0x00f42400
 8004174:	080052c0 	.word	0x080052c0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004180:	d165      	bne.n	800424e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8004182:	7efb      	ldrb	r3, [r7, #27]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d828      	bhi.n	80041da <UART_SetConfig+0x352>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0x308>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041c5 	.word	0x080041c5
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041cb 	.word	0x080041cb
 80041a4:	080041db 	.word	0x080041db
 80041a8:	080041db 	.word	0x080041db
 80041ac:	080041db 	.word	0x080041db
 80041b0:	080041d3 	.word	0x080041d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7ff fa78 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 80041b8:	6178      	str	r0, [r7, #20]
        break;
 80041ba:	e013      	b.n	80041e4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041bc:	f7ff fa86 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 80041c0:	6178      	str	r0, [r7, #20]
        break;
 80041c2:	e00f      	b.n	80041e4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c4:	4b56      	ldr	r3, [pc, #344]	; (8004320 <UART_SetConfig+0x498>)
 80041c6:	617b      	str	r3, [r7, #20]
        break;
 80041c8:	e00c      	b.n	80041e4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ca:	f7ff f9b9 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80041ce:	6178      	str	r0, [r7, #20]
        break;
 80041d0:	e008      	b.n	80041e4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d6:	617b      	str	r3, [r7, #20]
        break;
 80041d8:	e004      	b.n	80041e4 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	76bb      	strb	r3, [r7, #26]
        break;
 80041e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8086 	beq.w	80042f8 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	4a4c      	ldr	r2, [pc, #304]	; (8004324 <UART_SetConfig+0x49c>)
 80041f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f6:	461a      	mov	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80041fe:	005a      	lsls	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	441a      	add	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	b29b      	uxth	r3, r3
 8004212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b0f      	cmp	r3, #15
 8004218:	d916      	bls.n	8004248 <UART_SetConfig+0x3c0>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d212      	bcs.n	8004248 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f023 030f 	bic.w	r3, r3, #15
 800422a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	b29a      	uxth	r2, r3
 8004238:	89fb      	ldrh	r3, [r7, #14]
 800423a:	4313      	orrs	r3, r2
 800423c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	89fa      	ldrh	r2, [r7, #14]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	e057      	b.n	80042f8 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	76bb      	strb	r3, [r7, #26]
 800424c:	e054      	b.n	80042f8 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424e:	7efb      	ldrb	r3, [r7, #27]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d828      	bhi.n	80042a6 <UART_SetConfig+0x41e>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x3d4>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004281 	.word	0x08004281
 8004260:	08004289 	.word	0x08004289
 8004264:	08004291 	.word	0x08004291
 8004268:	080042a7 	.word	0x080042a7
 800426c:	08004297 	.word	0x08004297
 8004270:	080042a7 	.word	0x080042a7
 8004274:	080042a7 	.word	0x080042a7
 8004278:	080042a7 	.word	0x080042a7
 800427c:	0800429f 	.word	0x0800429f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7ff fa12 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8004284:	6178      	str	r0, [r7, #20]
        break;
 8004286:	e013      	b.n	80042b0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004288:	f7ff fa20 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 800428c:	6178      	str	r0, [r7, #20]
        break;
 800428e:	e00f      	b.n	80042b0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <UART_SetConfig+0x498>)
 8004292:	617b      	str	r3, [r7, #20]
        break;
 8004294:	e00c      	b.n	80042b0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7ff f953 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 800429a:	6178      	str	r0, [r7, #20]
        break;
 800429c:	e008      	b.n	80042b0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	617b      	str	r3, [r7, #20]
        break;
 80042a4:	e004      	b.n	80042b0 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	76bb      	strb	r3, [r7, #26]
        break;
 80042ae:	bf00      	nop
    }

    if (pclk != 0U)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d020      	beq.n	80042f8 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <UART_SetConfig+0x49c>)
 80042bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c0:	461a      	mov	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	441a      	add	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	b29b      	uxth	r3, r3
 80042da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	d908      	bls.n	80042f4 <UART_SetConfig+0x46c>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d204      	bcs.n	80042f4 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	e001      	b.n	80042f8 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004314:	7ebb      	ldrb	r3, [r7, #26]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bdb0      	pop	{r4, r5, r7, pc}
 800431e:	bf00      	nop
 8004320:	00f42400 	.word	0x00f42400
 8004324:	080052c0 	.word	0x080052c0

08004328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01a      	beq.n	800443e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004426:	d10a      	bne.n	800443e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af02      	add	r7, sp, #8
 8004470:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800447a:	f7fc fd93 	bl	8000fa4 <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b08      	cmp	r3, #8
 800448c:	d10e      	bne.n	80044ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f82f 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e025      	b.n	80044f8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d10e      	bne.n	80044d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f819 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e00f      	b.n	80044f8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b09c      	sub	sp, #112	; 0x70
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e0a9      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	f000 80a5 	beq.w	8004666 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451c:	f7fc fd42 	bl	8000fa4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004528:	429a      	cmp	r2, r3
 800452a:	d302      	bcc.n	8004532 <UART_WaitOnFlagUntilTimeout+0x32>
 800452c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452e:	2b00      	cmp	r3, #0
 8004530:	d140      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004542:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004546:	667b      	str	r3, [r7, #100]	; 0x64
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004552:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004556:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800455e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	663b      	str	r3, [r7, #96]	; 0x60
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004584:	64ba      	str	r2, [r7, #72]	; 0x48
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800458a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e069      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d051      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d149      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
 80045fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e6      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	613b      	str	r3, [r7, #16]
   return(result);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	66bb      	str	r3, [r7, #104]	; 0x68
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800462e:	623a      	str	r2, [r7, #32]
 8004630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	69f9      	ldr	r1, [r7, #28]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	61bb      	str	r3, [r7, #24]
   return(result);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e010      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	f43f af46 	beq.w	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3770      	adds	r7, #112	; 0x70
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e027      	b.n	80046f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2224      	movs	r2, #36	; 0x24
 80046b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e02d      	b.n	8004774 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f84f 	bl	80047f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004790:	2302      	movs	r3, #2
 8004792:	e02d      	b.n	80047f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	; 0x24
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f811 	bl	80047f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	2b00      	cmp	r3, #0
 8004806:	d108      	bne.n	800481a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004818:	e031      	b.n	800487e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800481a:	2308      	movs	r3, #8
 800481c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800481e:	2308      	movs	r3, #8
 8004820:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	0e5b      	lsrs	r3, r3, #25
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	0f5b      	lsrs	r3, r3, #29
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004842:	7bbb      	ldrb	r3, [r7, #14]
 8004844:	7b3a      	ldrb	r2, [r7, #12]
 8004846:	4910      	ldr	r1, [pc, #64]	; (8004888 <UARTEx_SetNbDataToProcess+0x90>)
 8004848:	5c8a      	ldrb	r2, [r1, r2]
 800484a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800484e:	7b3a      	ldrb	r2, [r7, #12]
 8004850:	490e      	ldr	r1, [pc, #56]	; (800488c <UARTEx_SetNbDataToProcess+0x94>)
 8004852:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004854:	fb93 f3f2 	sdiv	r3, r3, r2
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	7b7a      	ldrb	r2, [r7, #13]
 8004864:	4908      	ldr	r1, [pc, #32]	; (8004888 <UARTEx_SetNbDataToProcess+0x90>)
 8004866:	5c8a      	ldrb	r2, [r1, r2]
 8004868:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800486c:	7b7a      	ldrb	r2, [r7, #13]
 800486e:	4907      	ldr	r1, [pc, #28]	; (800488c <UARTEx_SetNbDataToProcess+0x94>)
 8004870:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004872:	fb93 f3f2 	sdiv	r3, r3, r2
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	080052d8 	.word	0x080052d8
 800488c:	080052e0 	.word	0x080052e0

08004890 <__errno>:
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <__errno+0x8>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000001c 	.word	0x2000001c

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4d0d      	ldr	r5, [pc, #52]	; (80048d4 <__libc_init_array+0x38>)
 80048a0:	4c0d      	ldr	r4, [pc, #52]	; (80048d8 <__libc_init_array+0x3c>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	2600      	movs	r6, #0
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	4d0b      	ldr	r5, [pc, #44]	; (80048dc <__libc_init_array+0x40>)
 80048ae:	4c0c      	ldr	r4, [pc, #48]	; (80048e0 <__libc_init_array+0x44>)
 80048b0:	f000 fc54 	bl	800515c <_init>
 80048b4:	1b64      	subs	r4, r4, r5
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	2600      	movs	r6, #0
 80048ba:	42a6      	cmp	r6, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c4:	4798      	blx	r3
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ce:	4798      	blx	r3
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	08005324 	.word	0x08005324
 80048d8:	08005324 	.word	0x08005324
 80048dc:	08005324 	.word	0x08005324
 80048e0:	08005328 	.word	0x08005328

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <siprintf>:
 80048f4:	b40e      	push	{r1, r2, r3}
 80048f6:	b500      	push	{lr}
 80048f8:	b09c      	sub	sp, #112	; 0x70
 80048fa:	ab1d      	add	r3, sp, #116	; 0x74
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	9006      	str	r0, [sp, #24]
 8004900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004904:	4809      	ldr	r0, [pc, #36]	; (800492c <siprintf+0x38>)
 8004906:	9107      	str	r1, [sp, #28]
 8004908:	9104      	str	r1, [sp, #16]
 800490a:	4909      	ldr	r1, [pc, #36]	; (8004930 <siprintf+0x3c>)
 800490c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004910:	9105      	str	r1, [sp, #20]
 8004912:	6800      	ldr	r0, [r0, #0]
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	a902      	add	r1, sp, #8
 8004918:	f000 f870 	bl	80049fc <_svfiprintf_r>
 800491c:	9b02      	ldr	r3, [sp, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	b01c      	add	sp, #112	; 0x70
 8004924:	f85d eb04 	ldr.w	lr, [sp], #4
 8004928:	b003      	add	sp, #12
 800492a:	4770      	bx	lr
 800492c:	2000001c 	.word	0x2000001c
 8004930:	ffff0208 	.word	0xffff0208

08004934 <strcpy>:
 8004934:	4603      	mov	r3, r0
 8004936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800493a:	f803 2b01 	strb.w	r2, [r3], #1
 800493e:	2a00      	cmp	r2, #0
 8004940:	d1f9      	bne.n	8004936 <strcpy+0x2>
 8004942:	4770      	bx	lr

08004944 <__ssputs_r>:
 8004944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	688e      	ldr	r6, [r1, #8]
 800494a:	429e      	cmp	r6, r3
 800494c:	4682      	mov	sl, r0
 800494e:	460c      	mov	r4, r1
 8004950:	4690      	mov	r8, r2
 8004952:	461f      	mov	r7, r3
 8004954:	d838      	bhi.n	80049c8 <__ssputs_r+0x84>
 8004956:	898a      	ldrh	r2, [r1, #12]
 8004958:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800495c:	d032      	beq.n	80049c4 <__ssputs_r+0x80>
 800495e:	6825      	ldr	r5, [r4, #0]
 8004960:	6909      	ldr	r1, [r1, #16]
 8004962:	eba5 0901 	sub.w	r9, r5, r1
 8004966:	6965      	ldr	r5, [r4, #20]
 8004968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800496c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004970:	3301      	adds	r3, #1
 8004972:	444b      	add	r3, r9
 8004974:	106d      	asrs	r5, r5, #1
 8004976:	429d      	cmp	r5, r3
 8004978:	bf38      	it	cc
 800497a:	461d      	movcc	r5, r3
 800497c:	0553      	lsls	r3, r2, #21
 800497e:	d531      	bpl.n	80049e4 <__ssputs_r+0xa0>
 8004980:	4629      	mov	r1, r5
 8004982:	f000 fb45 	bl	8005010 <_malloc_r>
 8004986:	4606      	mov	r6, r0
 8004988:	b950      	cbnz	r0, 80049a0 <__ssputs_r+0x5c>
 800498a:	230c      	movs	r3, #12
 800498c:	f8ca 3000 	str.w	r3, [sl]
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	6921      	ldr	r1, [r4, #16]
 80049a2:	464a      	mov	r2, r9
 80049a4:	f000 fabe 	bl	8004f24 <memcpy>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	6126      	str	r6, [r4, #16]
 80049b6:	6165      	str	r5, [r4, #20]
 80049b8:	444e      	add	r6, r9
 80049ba:	eba5 0509 	sub.w	r5, r5, r9
 80049be:	6026      	str	r6, [r4, #0]
 80049c0:	60a5      	str	r5, [r4, #8]
 80049c2:	463e      	mov	r6, r7
 80049c4:	42be      	cmp	r6, r7
 80049c6:	d900      	bls.n	80049ca <__ssputs_r+0x86>
 80049c8:	463e      	mov	r6, r7
 80049ca:	4632      	mov	r2, r6
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	4641      	mov	r1, r8
 80049d0:	f000 fab6 	bl	8004f40 <memmove>
 80049d4:	68a3      	ldr	r3, [r4, #8]
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	1b9b      	subs	r3, r3, r6
 80049da:	4432      	add	r2, r6
 80049dc:	60a3      	str	r3, [r4, #8]
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	2000      	movs	r0, #0
 80049e2:	e7db      	b.n	800499c <__ssputs_r+0x58>
 80049e4:	462a      	mov	r2, r5
 80049e6:	f000 fb6d 	bl	80050c4 <_realloc_r>
 80049ea:	4606      	mov	r6, r0
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d1e1      	bne.n	80049b4 <__ssputs_r+0x70>
 80049f0:	6921      	ldr	r1, [r4, #16]
 80049f2:	4650      	mov	r0, sl
 80049f4:	f000 fabe 	bl	8004f74 <_free_r>
 80049f8:	e7c7      	b.n	800498a <__ssputs_r+0x46>
	...

080049fc <_svfiprintf_r>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	4698      	mov	r8, r3
 8004a02:	898b      	ldrh	r3, [r1, #12]
 8004a04:	061b      	lsls	r3, r3, #24
 8004a06:	b09d      	sub	sp, #116	; 0x74
 8004a08:	4607      	mov	r7, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	d50e      	bpl.n	8004a2e <_svfiprintf_r+0x32>
 8004a10:	690b      	ldr	r3, [r1, #16]
 8004a12:	b963      	cbnz	r3, 8004a2e <_svfiprintf_r+0x32>
 8004a14:	2140      	movs	r1, #64	; 0x40
 8004a16:	f000 fafb 	bl	8005010 <_malloc_r>
 8004a1a:	6028      	str	r0, [r5, #0]
 8004a1c:	6128      	str	r0, [r5, #16]
 8004a1e:	b920      	cbnz	r0, 8004a2a <_svfiprintf_r+0x2e>
 8004a20:	230c      	movs	r3, #12
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	e0d1      	b.n	8004bce <_svfiprintf_r+0x1d2>
 8004a2a:	2340      	movs	r3, #64	; 0x40
 8004a2c:	616b      	str	r3, [r5, #20]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9309      	str	r3, [sp, #36]	; 0x24
 8004a32:	2320      	movs	r3, #32
 8004a34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a3c:	2330      	movs	r3, #48	; 0x30
 8004a3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004be8 <_svfiprintf_r+0x1ec>
 8004a42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a46:	f04f 0901 	mov.w	r9, #1
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	469a      	mov	sl, r3
 8004a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a52:	b10a      	cbz	r2, 8004a58 <_svfiprintf_r+0x5c>
 8004a54:	2a25      	cmp	r2, #37	; 0x25
 8004a56:	d1f9      	bne.n	8004a4c <_svfiprintf_r+0x50>
 8004a58:	ebba 0b04 	subs.w	fp, sl, r4
 8004a5c:	d00b      	beq.n	8004a76 <_svfiprintf_r+0x7a>
 8004a5e:	465b      	mov	r3, fp
 8004a60:	4622      	mov	r2, r4
 8004a62:	4629      	mov	r1, r5
 8004a64:	4638      	mov	r0, r7
 8004a66:	f7ff ff6d 	bl	8004944 <__ssputs_r>
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	f000 80aa 	beq.w	8004bc4 <_svfiprintf_r+0x1c8>
 8004a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a72:	445a      	add	r2, fp
 8004a74:	9209      	str	r2, [sp, #36]	; 0x24
 8004a76:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80a2 	beq.w	8004bc4 <_svfiprintf_r+0x1c8>
 8004a80:	2300      	movs	r3, #0
 8004a82:	f04f 32ff 	mov.w	r2, #4294967295
 8004a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8a:	f10a 0a01 	add.w	sl, sl, #1
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	9307      	str	r3, [sp, #28]
 8004a92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a96:	931a      	str	r3, [sp, #104]	; 0x68
 8004a98:	4654      	mov	r4, sl
 8004a9a:	2205      	movs	r2, #5
 8004a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa0:	4851      	ldr	r0, [pc, #324]	; (8004be8 <_svfiprintf_r+0x1ec>)
 8004aa2:	f7fb fb75 	bl	8000190 <memchr>
 8004aa6:	9a04      	ldr	r2, [sp, #16]
 8004aa8:	b9d8      	cbnz	r0, 8004ae2 <_svfiprintf_r+0xe6>
 8004aaa:	06d0      	lsls	r0, r2, #27
 8004aac:	bf44      	itt	mi
 8004aae:	2320      	movmi	r3, #32
 8004ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab4:	0711      	lsls	r1, r2, #28
 8004ab6:	bf44      	itt	mi
 8004ab8:	232b      	movmi	r3, #43	; 0x2b
 8004aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004abe:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac4:	d015      	beq.n	8004af2 <_svfiprintf_r+0xf6>
 8004ac6:	9a07      	ldr	r2, [sp, #28]
 8004ac8:	4654      	mov	r4, sl
 8004aca:	2000      	movs	r0, #0
 8004acc:	f04f 0c0a 	mov.w	ip, #10
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad6:	3b30      	subs	r3, #48	; 0x30
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d94e      	bls.n	8004b7a <_svfiprintf_r+0x17e>
 8004adc:	b1b0      	cbz	r0, 8004b0c <_svfiprintf_r+0x110>
 8004ade:	9207      	str	r2, [sp, #28]
 8004ae0:	e014      	b.n	8004b0c <_svfiprintf_r+0x110>
 8004ae2:	eba0 0308 	sub.w	r3, r0, r8
 8004ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aea:	4313      	orrs	r3, r2
 8004aec:	9304      	str	r3, [sp, #16]
 8004aee:	46a2      	mov	sl, r4
 8004af0:	e7d2      	b.n	8004a98 <_svfiprintf_r+0x9c>
 8004af2:	9b03      	ldr	r3, [sp, #12]
 8004af4:	1d19      	adds	r1, r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	9103      	str	r1, [sp, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bfbb      	ittet	lt
 8004afe:	425b      	neglt	r3, r3
 8004b00:	f042 0202 	orrlt.w	r2, r2, #2
 8004b04:	9307      	strge	r3, [sp, #28]
 8004b06:	9307      	strlt	r3, [sp, #28]
 8004b08:	bfb8      	it	lt
 8004b0a:	9204      	strlt	r2, [sp, #16]
 8004b0c:	7823      	ldrb	r3, [r4, #0]
 8004b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b10:	d10c      	bne.n	8004b2c <_svfiprintf_r+0x130>
 8004b12:	7863      	ldrb	r3, [r4, #1]
 8004b14:	2b2a      	cmp	r3, #42	; 0x2a
 8004b16:	d135      	bne.n	8004b84 <_svfiprintf_r+0x188>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	1d1a      	adds	r2, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	9203      	str	r2, [sp, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bfb8      	it	lt
 8004b24:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b28:	3402      	adds	r4, #2
 8004b2a:	9305      	str	r3, [sp, #20]
 8004b2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bf8 <_svfiprintf_r+0x1fc>
 8004b30:	7821      	ldrb	r1, [r4, #0]
 8004b32:	2203      	movs	r2, #3
 8004b34:	4650      	mov	r0, sl
 8004b36:	f7fb fb2b 	bl	8000190 <memchr>
 8004b3a:	b140      	cbz	r0, 8004b4e <_svfiprintf_r+0x152>
 8004b3c:	2340      	movs	r3, #64	; 0x40
 8004b3e:	eba0 000a 	sub.w	r0, r0, sl
 8004b42:	fa03 f000 	lsl.w	r0, r3, r0
 8004b46:	9b04      	ldr	r3, [sp, #16]
 8004b48:	4303      	orrs	r3, r0
 8004b4a:	3401      	adds	r4, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b52:	4826      	ldr	r0, [pc, #152]	; (8004bec <_svfiprintf_r+0x1f0>)
 8004b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b58:	2206      	movs	r2, #6
 8004b5a:	f7fb fb19 	bl	8000190 <memchr>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d038      	beq.n	8004bd4 <_svfiprintf_r+0x1d8>
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <_svfiprintf_r+0x1f4>)
 8004b64:	bb1b      	cbnz	r3, 8004bae <_svfiprintf_r+0x1b2>
 8004b66:	9b03      	ldr	r3, [sp, #12]
 8004b68:	3307      	adds	r3, #7
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	3308      	adds	r3, #8
 8004b70:	9303      	str	r3, [sp, #12]
 8004b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b74:	4433      	add	r3, r6
 8004b76:	9309      	str	r3, [sp, #36]	; 0x24
 8004b78:	e767      	b.n	8004a4a <_svfiprintf_r+0x4e>
 8004b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b7e:	460c      	mov	r4, r1
 8004b80:	2001      	movs	r0, #1
 8004b82:	e7a5      	b.n	8004ad0 <_svfiprintf_r+0xd4>
 8004b84:	2300      	movs	r3, #0
 8004b86:	3401      	adds	r4, #1
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0c0a 	mov.w	ip, #10
 8004b90:	4620      	mov	r0, r4
 8004b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b96:	3a30      	subs	r2, #48	; 0x30
 8004b98:	2a09      	cmp	r2, #9
 8004b9a:	d903      	bls.n	8004ba4 <_svfiprintf_r+0x1a8>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0c5      	beq.n	8004b2c <_svfiprintf_r+0x130>
 8004ba0:	9105      	str	r1, [sp, #20]
 8004ba2:	e7c3      	b.n	8004b2c <_svfiprintf_r+0x130>
 8004ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ba8:	4604      	mov	r4, r0
 8004baa:	2301      	movs	r3, #1
 8004bac:	e7f0      	b.n	8004b90 <_svfiprintf_r+0x194>
 8004bae:	ab03      	add	r3, sp, #12
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <_svfiprintf_r+0x1f8>)
 8004bb6:	a904      	add	r1, sp, #16
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f3af 8000 	nop.w
 8004bbe:	1c42      	adds	r2, r0, #1
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	d1d6      	bne.n	8004b72 <_svfiprintf_r+0x176>
 8004bc4:	89ab      	ldrh	r3, [r5, #12]
 8004bc6:	065b      	lsls	r3, r3, #25
 8004bc8:	f53f af2c 	bmi.w	8004a24 <_svfiprintf_r+0x28>
 8004bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bce:	b01d      	add	sp, #116	; 0x74
 8004bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd4:	ab03      	add	r3, sp, #12
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	462a      	mov	r2, r5
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <_svfiprintf_r+0x1f8>)
 8004bdc:	a904      	add	r1, sp, #16
 8004bde:	4638      	mov	r0, r7
 8004be0:	f000 f87a 	bl	8004cd8 <_printf_i>
 8004be4:	e7eb      	b.n	8004bbe <_svfiprintf_r+0x1c2>
 8004be6:	bf00      	nop
 8004be8:	080052e8 	.word	0x080052e8
 8004bec:	080052f2 	.word	0x080052f2
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	08004945 	.word	0x08004945
 8004bf8:	080052ee 	.word	0x080052ee

08004bfc <_printf_common>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	4616      	mov	r6, r2
 8004c02:	4699      	mov	r9, r3
 8004c04:	688a      	ldr	r2, [r1, #8]
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bfb8      	it	lt
 8004c10:	4613      	movlt	r3, r2
 8004c12:	6033      	str	r3, [r6, #0]
 8004c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c18:	4607      	mov	r7, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	b10a      	cbz	r2, 8004c22 <_printf_common+0x26>
 8004c1e:	3301      	adds	r3, #1
 8004c20:	6033      	str	r3, [r6, #0]
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	0699      	lsls	r1, r3, #26
 8004c26:	bf42      	ittt	mi
 8004c28:	6833      	ldrmi	r3, [r6, #0]
 8004c2a:	3302      	addmi	r3, #2
 8004c2c:	6033      	strmi	r3, [r6, #0]
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	f015 0506 	ands.w	r5, r5, #6
 8004c34:	d106      	bne.n	8004c44 <_printf_common+0x48>
 8004c36:	f104 0a19 	add.w	sl, r4, #25
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	6832      	ldr	r2, [r6, #0]
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	42ab      	cmp	r3, r5
 8004c42:	dc26      	bgt.n	8004c92 <_printf_common+0x96>
 8004c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c48:	1e13      	subs	r3, r2, #0
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	bf18      	it	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	0692      	lsls	r2, r2, #26
 8004c52:	d42b      	bmi.n	8004cac <_printf_common+0xb0>
 8004c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c0      	blx	r8
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d01e      	beq.n	8004ca0 <_printf_common+0xa4>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	68e5      	ldr	r5, [r4, #12]
 8004c66:	6832      	ldr	r2, [r6, #0]
 8004c68:	f003 0306 	and.w	r3, r3, #6
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	bf08      	it	eq
 8004c70:	1aad      	subeq	r5, r5, r2
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	6922      	ldr	r2, [r4, #16]
 8004c76:	bf0c      	ite	eq
 8004c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c7c:	2500      	movne	r5, #0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bfc4      	itt	gt
 8004c82:	1a9b      	subgt	r3, r3, r2
 8004c84:	18ed      	addgt	r5, r5, r3
 8004c86:	2600      	movs	r6, #0
 8004c88:	341a      	adds	r4, #26
 8004c8a:	42b5      	cmp	r5, r6
 8004c8c:	d11a      	bne.n	8004cc4 <_printf_common+0xc8>
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e008      	b.n	8004ca4 <_printf_common+0xa8>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4649      	mov	r1, r9
 8004c98:	4638      	mov	r0, r7
 8004c9a:	47c0      	blx	r8
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d103      	bne.n	8004ca8 <_printf_common+0xac>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7c6      	b.n	8004c3a <_printf_common+0x3e>
 8004cac:	18e1      	adds	r1, r4, r3
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	2030      	movs	r0, #48	; 0x30
 8004cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cb6:	4422      	add	r2, r4
 8004cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	e7c7      	b.n	8004c54 <_printf_common+0x58>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4638      	mov	r0, r7
 8004ccc:	47c0      	blx	r8
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d0e6      	beq.n	8004ca0 <_printf_common+0xa4>
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7d9      	b.n	8004c8a <_printf_common+0x8e>
	...

08004cd8 <_printf_i>:
 8004cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	460c      	mov	r4, r1
 8004cde:	4691      	mov	r9, r2
 8004ce0:	7e27      	ldrb	r7, [r4, #24]
 8004ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ce4:	2f78      	cmp	r7, #120	; 0x78
 8004ce6:	4680      	mov	r8, r0
 8004ce8:	469a      	mov	sl, r3
 8004cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cee:	d807      	bhi.n	8004d00 <_printf_i+0x28>
 8004cf0:	2f62      	cmp	r7, #98	; 0x62
 8004cf2:	d80a      	bhi.n	8004d0a <_printf_i+0x32>
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	f000 80d8 	beq.w	8004eaa <_printf_i+0x1d2>
 8004cfa:	2f58      	cmp	r7, #88	; 0x58
 8004cfc:	f000 80a3 	beq.w	8004e46 <_printf_i+0x16e>
 8004d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d08:	e03a      	b.n	8004d80 <_printf_i+0xa8>
 8004d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d0e:	2b15      	cmp	r3, #21
 8004d10:	d8f6      	bhi.n	8004d00 <_printf_i+0x28>
 8004d12:	a001      	add	r0, pc, #4	; (adr r0, 8004d18 <_printf_i+0x40>)
 8004d14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d01 	.word	0x08004d01
 8004d24:	08004d01 	.word	0x08004d01
 8004d28:	08004d01 	.word	0x08004d01
 8004d2c:	08004d01 	.word	0x08004d01
 8004d30:	08004d85 	.word	0x08004d85
 8004d34:	08004d01 	.word	0x08004d01
 8004d38:	08004d01 	.word	0x08004d01
 8004d3c:	08004d01 	.word	0x08004d01
 8004d40:	08004d01 	.word	0x08004d01
 8004d44:	08004e91 	.word	0x08004e91
 8004d48:	08004db5 	.word	0x08004db5
 8004d4c:	08004e73 	.word	0x08004e73
 8004d50:	08004d01 	.word	0x08004d01
 8004d54:	08004d01 	.word	0x08004d01
 8004d58:	08004eb3 	.word	0x08004eb3
 8004d5c:	08004d01 	.word	0x08004d01
 8004d60:	08004db5 	.word	0x08004db5
 8004d64:	08004d01 	.word	0x08004d01
 8004d68:	08004d01 	.word	0x08004d01
 8004d6c:	08004e7b 	.word	0x08004e7b
 8004d70:	680b      	ldr	r3, [r1, #0]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	600a      	str	r2, [r1, #0]
 8004d78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0a3      	b.n	8004ecc <_printf_i+0x1f4>
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	6808      	ldr	r0, [r1, #0]
 8004d88:	062e      	lsls	r6, r5, #24
 8004d8a:	f100 0304 	add.w	r3, r0, #4
 8004d8e:	d50a      	bpl.n	8004da6 <_printf_i+0xce>
 8004d90:	6805      	ldr	r5, [r0, #0]
 8004d92:	600b      	str	r3, [r1, #0]
 8004d94:	2d00      	cmp	r5, #0
 8004d96:	da03      	bge.n	8004da0 <_printf_i+0xc8>
 8004d98:	232d      	movs	r3, #45	; 0x2d
 8004d9a:	426d      	negs	r5, r5
 8004d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da0:	485e      	ldr	r0, [pc, #376]	; (8004f1c <_printf_i+0x244>)
 8004da2:	230a      	movs	r3, #10
 8004da4:	e019      	b.n	8004dda <_printf_i+0x102>
 8004da6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004daa:	6805      	ldr	r5, [r0, #0]
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	bf18      	it	ne
 8004db0:	b22d      	sxthne	r5, r5
 8004db2:	e7ef      	b.n	8004d94 <_printf_i+0xbc>
 8004db4:	680b      	ldr	r3, [r1, #0]
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	1d18      	adds	r0, r3, #4
 8004dba:	6008      	str	r0, [r1, #0]
 8004dbc:	0628      	lsls	r0, r5, #24
 8004dbe:	d501      	bpl.n	8004dc4 <_printf_i+0xec>
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	e002      	b.n	8004dca <_printf_i+0xf2>
 8004dc4:	0669      	lsls	r1, r5, #25
 8004dc6:	d5fb      	bpl.n	8004dc0 <_printf_i+0xe8>
 8004dc8:	881d      	ldrh	r5, [r3, #0]
 8004dca:	4854      	ldr	r0, [pc, #336]	; (8004f1c <_printf_i+0x244>)
 8004dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8004dce:	bf0c      	ite	eq
 8004dd0:	2308      	moveq	r3, #8
 8004dd2:	230a      	movne	r3, #10
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dda:	6866      	ldr	r6, [r4, #4]
 8004ddc:	60a6      	str	r6, [r4, #8]
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	bfa2      	ittt	ge
 8004de2:	6821      	ldrge	r1, [r4, #0]
 8004de4:	f021 0104 	bicge.w	r1, r1, #4
 8004de8:	6021      	strge	r1, [r4, #0]
 8004dea:	b90d      	cbnz	r5, 8004df0 <_printf_i+0x118>
 8004dec:	2e00      	cmp	r6, #0
 8004dee:	d04d      	beq.n	8004e8c <_printf_i+0x1b4>
 8004df0:	4616      	mov	r6, r2
 8004df2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004df6:	fb03 5711 	mls	r7, r3, r1, r5
 8004dfa:	5dc7      	ldrb	r7, [r0, r7]
 8004dfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e00:	462f      	mov	r7, r5
 8004e02:	42bb      	cmp	r3, r7
 8004e04:	460d      	mov	r5, r1
 8004e06:	d9f4      	bls.n	8004df2 <_printf_i+0x11a>
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d10b      	bne.n	8004e24 <_printf_i+0x14c>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	07df      	lsls	r7, r3, #31
 8004e10:	d508      	bpl.n	8004e24 <_printf_i+0x14c>
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	6861      	ldr	r1, [r4, #4]
 8004e16:	4299      	cmp	r1, r3
 8004e18:	bfde      	ittt	le
 8004e1a:	2330      	movle	r3, #48	; 0x30
 8004e1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e24:	1b92      	subs	r2, r2, r6
 8004e26:	6122      	str	r2, [r4, #16]
 8004e28:	f8cd a000 	str.w	sl, [sp]
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	aa03      	add	r2, sp, #12
 8004e30:	4621      	mov	r1, r4
 8004e32:	4640      	mov	r0, r8
 8004e34:	f7ff fee2 	bl	8004bfc <_printf_common>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d14c      	bne.n	8004ed6 <_printf_i+0x1fe>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	b004      	add	sp, #16
 8004e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e46:	4835      	ldr	r0, [pc, #212]	; (8004f1c <_printf_i+0x244>)
 8004e48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	680e      	ldr	r6, [r1, #0]
 8004e50:	061f      	lsls	r7, r3, #24
 8004e52:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e56:	600e      	str	r6, [r1, #0]
 8004e58:	d514      	bpl.n	8004e84 <_printf_i+0x1ac>
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	bf44      	itt	mi
 8004e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e62:	6023      	strmi	r3, [r4, #0]
 8004e64:	b91d      	cbnz	r5, 8004e6e <_printf_i+0x196>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f023 0320 	bic.w	r3, r3, #32
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	2310      	movs	r3, #16
 8004e70:	e7b0      	b.n	8004dd4 <_printf_i+0xfc>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f043 0320 	orr.w	r3, r3, #32
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	2378      	movs	r3, #120	; 0x78
 8004e7c:	4828      	ldr	r0, [pc, #160]	; (8004f20 <_printf_i+0x248>)
 8004e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e82:	e7e3      	b.n	8004e4c <_printf_i+0x174>
 8004e84:	065e      	lsls	r6, r3, #25
 8004e86:	bf48      	it	mi
 8004e88:	b2ad      	uxthmi	r5, r5
 8004e8a:	e7e6      	b.n	8004e5a <_printf_i+0x182>
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	e7bb      	b.n	8004e08 <_printf_i+0x130>
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	6826      	ldr	r6, [r4, #0]
 8004e94:	6960      	ldr	r0, [r4, #20]
 8004e96:	1d1d      	adds	r5, r3, #4
 8004e98:	600d      	str	r5, [r1, #0]
 8004e9a:	0635      	lsls	r5, r6, #24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	d501      	bpl.n	8004ea4 <_printf_i+0x1cc>
 8004ea0:	6018      	str	r0, [r3, #0]
 8004ea2:	e002      	b.n	8004eaa <_printf_i+0x1d2>
 8004ea4:	0671      	lsls	r1, r6, #25
 8004ea6:	d5fb      	bpl.n	8004ea0 <_printf_i+0x1c8>
 8004ea8:	8018      	strh	r0, [r3, #0]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	4616      	mov	r6, r2
 8004eb0:	e7ba      	b.n	8004e28 <_printf_i+0x150>
 8004eb2:	680b      	ldr	r3, [r1, #0]
 8004eb4:	1d1a      	adds	r2, r3, #4
 8004eb6:	600a      	str	r2, [r1, #0]
 8004eb8:	681e      	ldr	r6, [r3, #0]
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7fb f966 	bl	8000190 <memchr>
 8004ec4:	b108      	cbz	r0, 8004eca <_printf_i+0x1f2>
 8004ec6:	1b80      	subs	r0, r0, r6
 8004ec8:	6060      	str	r0, [r4, #4]
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	6123      	str	r3, [r4, #16]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed4:	e7a8      	b.n	8004e28 <_printf_i+0x150>
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	4632      	mov	r2, r6
 8004eda:	4649      	mov	r1, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	47d0      	blx	sl
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d0ab      	beq.n	8004e3c <_printf_i+0x164>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	079b      	lsls	r3, r3, #30
 8004ee8:	d413      	bmi.n	8004f12 <_printf_i+0x23a>
 8004eea:	68e0      	ldr	r0, [r4, #12]
 8004eec:	9b03      	ldr	r3, [sp, #12]
 8004eee:	4298      	cmp	r0, r3
 8004ef0:	bfb8      	it	lt
 8004ef2:	4618      	movlt	r0, r3
 8004ef4:	e7a4      	b.n	8004e40 <_printf_i+0x168>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4649      	mov	r1, r9
 8004efc:	4640      	mov	r0, r8
 8004efe:	47d0      	blx	sl
 8004f00:	3001      	adds	r0, #1
 8004f02:	d09b      	beq.n	8004e3c <_printf_i+0x164>
 8004f04:	3501      	adds	r5, #1
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	9903      	ldr	r1, [sp, #12]
 8004f0a:	1a5b      	subs	r3, r3, r1
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dcf2      	bgt.n	8004ef6 <_printf_i+0x21e>
 8004f10:	e7eb      	b.n	8004eea <_printf_i+0x212>
 8004f12:	2500      	movs	r5, #0
 8004f14:	f104 0619 	add.w	r6, r4, #25
 8004f18:	e7f5      	b.n	8004f06 <_printf_i+0x22e>
 8004f1a:	bf00      	nop
 8004f1c:	080052f9 	.word	0x080052f9
 8004f20:	0800530a 	.word	0x0800530a

08004f24 <memcpy>:
 8004f24:	440a      	add	r2, r1
 8004f26:	4291      	cmp	r1, r2
 8004f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f2c:	d100      	bne.n	8004f30 <memcpy+0xc>
 8004f2e:	4770      	bx	lr
 8004f30:	b510      	push	{r4, lr}
 8004f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f3a:	4291      	cmp	r1, r2
 8004f3c:	d1f9      	bne.n	8004f32 <memcpy+0xe>
 8004f3e:	bd10      	pop	{r4, pc}

08004f40 <memmove>:
 8004f40:	4288      	cmp	r0, r1
 8004f42:	b510      	push	{r4, lr}
 8004f44:	eb01 0402 	add.w	r4, r1, r2
 8004f48:	d902      	bls.n	8004f50 <memmove+0x10>
 8004f4a:	4284      	cmp	r4, r0
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	d807      	bhi.n	8004f60 <memmove+0x20>
 8004f50:	1e43      	subs	r3, r0, #1
 8004f52:	42a1      	cmp	r1, r4
 8004f54:	d008      	beq.n	8004f68 <memmove+0x28>
 8004f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f5e:	e7f8      	b.n	8004f52 <memmove+0x12>
 8004f60:	4402      	add	r2, r0
 8004f62:	4601      	mov	r1, r0
 8004f64:	428a      	cmp	r2, r1
 8004f66:	d100      	bne.n	8004f6a <memmove+0x2a>
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f72:	e7f7      	b.n	8004f64 <memmove+0x24>

08004f74 <_free_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4605      	mov	r5, r0
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	d045      	beq.n	8005008 <_free_r+0x94>
 8004f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f80:	1f0c      	subs	r4, r1, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bfb8      	it	lt
 8004f86:	18e4      	addlt	r4, r4, r3
 8004f88:	f000 f8d2 	bl	8005130 <__malloc_lock>
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <_free_r+0x98>)
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	4610      	mov	r0, r2
 8004f92:	b933      	cbnz	r3, 8004fa2 <_free_r+0x2e>
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	6014      	str	r4, [r2, #0]
 8004f98:	4628      	mov	r0, r5
 8004f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f9e:	f000 b8cd 	b.w	800513c <__malloc_unlock>
 8004fa2:	42a3      	cmp	r3, r4
 8004fa4:	d90b      	bls.n	8004fbe <_free_r+0x4a>
 8004fa6:	6821      	ldr	r1, [r4, #0]
 8004fa8:	1862      	adds	r2, r4, r1
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bf04      	itt	eq
 8004fae:	681a      	ldreq	r2, [r3, #0]
 8004fb0:	685b      	ldreq	r3, [r3, #4]
 8004fb2:	6063      	str	r3, [r4, #4]
 8004fb4:	bf04      	itt	eq
 8004fb6:	1852      	addeq	r2, r2, r1
 8004fb8:	6022      	streq	r2, [r4, #0]
 8004fba:	6004      	str	r4, [r0, #0]
 8004fbc:	e7ec      	b.n	8004f98 <_free_r+0x24>
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b10b      	cbz	r3, 8004fc8 <_free_r+0x54>
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	d9fa      	bls.n	8004fbe <_free_r+0x4a>
 8004fc8:	6811      	ldr	r1, [r2, #0]
 8004fca:	1850      	adds	r0, r2, r1
 8004fcc:	42a0      	cmp	r0, r4
 8004fce:	d10b      	bne.n	8004fe8 <_free_r+0x74>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	1850      	adds	r0, r2, r1
 8004fd6:	4283      	cmp	r3, r0
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	d1dd      	bne.n	8004f98 <_free_r+0x24>
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	4401      	add	r1, r0
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	e7d7      	b.n	8004f98 <_free_r+0x24>
 8004fe8:	d902      	bls.n	8004ff0 <_free_r+0x7c>
 8004fea:	230c      	movs	r3, #12
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	e7d3      	b.n	8004f98 <_free_r+0x24>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	1821      	adds	r1, r4, r0
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	bf04      	itt	eq
 8004ff8:	6819      	ldreq	r1, [r3, #0]
 8004ffa:	685b      	ldreq	r3, [r3, #4]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	bf04      	itt	eq
 8005000:	1809      	addeq	r1, r1, r0
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	6054      	str	r4, [r2, #4]
 8005006:	e7c7      	b.n	8004f98 <_free_r+0x24>
 8005008:	bd38      	pop	{r3, r4, r5, pc}
 800500a:	bf00      	nop
 800500c:	200000ac 	.word	0x200000ac

08005010 <_malloc_r>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	1ccd      	adds	r5, r1, #3
 8005014:	f025 0503 	bic.w	r5, r5, #3
 8005018:	3508      	adds	r5, #8
 800501a:	2d0c      	cmp	r5, #12
 800501c:	bf38      	it	cc
 800501e:	250c      	movcc	r5, #12
 8005020:	2d00      	cmp	r5, #0
 8005022:	4606      	mov	r6, r0
 8005024:	db01      	blt.n	800502a <_malloc_r+0x1a>
 8005026:	42a9      	cmp	r1, r5
 8005028:	d903      	bls.n	8005032 <_malloc_r+0x22>
 800502a:	230c      	movs	r3, #12
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	2000      	movs	r0, #0
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005032:	f000 f87d 	bl	8005130 <__malloc_lock>
 8005036:	4921      	ldr	r1, [pc, #132]	; (80050bc <_malloc_r+0xac>)
 8005038:	680a      	ldr	r2, [r1, #0]
 800503a:	4614      	mov	r4, r2
 800503c:	b99c      	cbnz	r4, 8005066 <_malloc_r+0x56>
 800503e:	4f20      	ldr	r7, [pc, #128]	; (80050c0 <_malloc_r+0xb0>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	b923      	cbnz	r3, 800504e <_malloc_r+0x3e>
 8005044:	4621      	mov	r1, r4
 8005046:	4630      	mov	r0, r6
 8005048:	f000 f862 	bl	8005110 <_sbrk_r>
 800504c:	6038      	str	r0, [r7, #0]
 800504e:	4629      	mov	r1, r5
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f85d 	bl	8005110 <_sbrk_r>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d123      	bne.n	80050a2 <_malloc_r+0x92>
 800505a:	230c      	movs	r3, #12
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	4630      	mov	r0, r6
 8005060:	f000 f86c 	bl	800513c <__malloc_unlock>
 8005064:	e7e3      	b.n	800502e <_malloc_r+0x1e>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	1b5b      	subs	r3, r3, r5
 800506a:	d417      	bmi.n	800509c <_malloc_r+0x8c>
 800506c:	2b0b      	cmp	r3, #11
 800506e:	d903      	bls.n	8005078 <_malloc_r+0x68>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	441c      	add	r4, r3
 8005074:	6025      	str	r5, [r4, #0]
 8005076:	e004      	b.n	8005082 <_malloc_r+0x72>
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	42a2      	cmp	r2, r4
 800507c:	bf0c      	ite	eq
 800507e:	600b      	streq	r3, [r1, #0]
 8005080:	6053      	strne	r3, [r2, #4]
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f85a 	bl	800513c <__malloc_unlock>
 8005088:	f104 000b 	add.w	r0, r4, #11
 800508c:	1d23      	adds	r3, r4, #4
 800508e:	f020 0007 	bic.w	r0, r0, #7
 8005092:	1ac2      	subs	r2, r0, r3
 8005094:	d0cc      	beq.n	8005030 <_malloc_r+0x20>
 8005096:	1a1b      	subs	r3, r3, r0
 8005098:	50a3      	str	r3, [r4, r2]
 800509a:	e7c9      	b.n	8005030 <_malloc_r+0x20>
 800509c:	4622      	mov	r2, r4
 800509e:	6864      	ldr	r4, [r4, #4]
 80050a0:	e7cc      	b.n	800503c <_malloc_r+0x2c>
 80050a2:	1cc4      	adds	r4, r0, #3
 80050a4:	f024 0403 	bic.w	r4, r4, #3
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d0e3      	beq.n	8005074 <_malloc_r+0x64>
 80050ac:	1a21      	subs	r1, r4, r0
 80050ae:	4630      	mov	r0, r6
 80050b0:	f000 f82e 	bl	8005110 <_sbrk_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d1dd      	bne.n	8005074 <_malloc_r+0x64>
 80050b8:	e7cf      	b.n	800505a <_malloc_r+0x4a>
 80050ba:	bf00      	nop
 80050bc:	200000ac 	.word	0x200000ac
 80050c0:	200000b0 	.word	0x200000b0

080050c4 <_realloc_r>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	4607      	mov	r7, r0
 80050c8:	4614      	mov	r4, r2
 80050ca:	460e      	mov	r6, r1
 80050cc:	b921      	cbnz	r1, 80050d8 <_realloc_r+0x14>
 80050ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050d2:	4611      	mov	r1, r2
 80050d4:	f7ff bf9c 	b.w	8005010 <_malloc_r>
 80050d8:	b922      	cbnz	r2, 80050e4 <_realloc_r+0x20>
 80050da:	f7ff ff4b 	bl	8004f74 <_free_r>
 80050de:	4625      	mov	r5, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e4:	f000 f830 	bl	8005148 <_malloc_usable_size_r>
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d20f      	bcs.n	800510c <_realloc_r+0x48>
 80050ec:	4621      	mov	r1, r4
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ff8e 	bl	8005010 <_malloc_r>
 80050f4:	4605      	mov	r5, r0
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d0f2      	beq.n	80050e0 <_realloc_r+0x1c>
 80050fa:	4631      	mov	r1, r6
 80050fc:	4622      	mov	r2, r4
 80050fe:	f7ff ff11 	bl	8004f24 <memcpy>
 8005102:	4631      	mov	r1, r6
 8005104:	4638      	mov	r0, r7
 8005106:	f7ff ff35 	bl	8004f74 <_free_r>
 800510a:	e7e9      	b.n	80050e0 <_realloc_r+0x1c>
 800510c:	4635      	mov	r5, r6
 800510e:	e7e7      	b.n	80050e0 <_realloc_r+0x1c>

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d06      	ldr	r5, [pc, #24]	; (800512c <_sbrk_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	f7fb fe70 	bl	8000e00 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200001e0 	.word	0x200001e0

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__malloc_lock+0x8>)
 8005132:	f000 b811 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	200001e8 	.word	0x200001e8

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__malloc_unlock+0x8>)
 800513e:	f000 b80c 	b.w	800515a <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	200001e8 	.word	0x200001e8

08005148 <_malloc_usable_size_r>:
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f18      	subs	r0, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfbc      	itt	lt
 8005152:	580b      	ldrlt	r3, [r1, r0]
 8005154:	18c0      	addlt	r0, r0, r3
 8005156:	4770      	bx	lr

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
